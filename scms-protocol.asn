-------------------------------------------------------------------------------
-- SCMS-Protocol
--
-- Describes the high level messages exchanged between components in the SCMS
-- system. Each pair of communicating entities has a defined interface for
-- communication. Unsecured communication over these interfaces is encapsulated
-- in a series of Scoped messages. These Scoped messages can then be further
-- encapsulated as a Signed message, and further as a Secured message (i.e.,
-- a Scoped message that has been Signed and then Encrypted).
--
-- This file is part of the SCMS protocol developed by CAMP VSC5
-- It depends on the IEEE 1609.2 protocol specification
-------------------------------------------------------------------------------

IEEE1609dot2ScmsProtocol {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) protocol(1)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  HashAlgorithm,
  HashedId32,
  SequenceOfPsid,
  SequenceOfPsidSsp,
  Uint8,
  Uint16
FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) base(1) base-types(2)}

  Certificate,
  Ieee1609Dot2Data,
  SequenceOfCertificate,
  Signature,
  SignerIdentifier
FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) base (1) schema (1)}

  MisbehaviorReportingPsid,
  SecurityMgmtPsid
FROM Ieee1609dot2ScmsBaseTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
scms (2) interfaces(1) base-types (2)}

  ScmsComponentCertificateManagementPDU
FROM Ieee1609Dot2ScmsComponentCertificateManagement
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) component-certificate-management(3)}

  EcaEndEntityInterfacePDU
FROM Ieee1609Dot2EcaEndEntityInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) eca-ee(5)}

  EndEntityMaInterfacePDU
FROM Ieee1609Dot2EndEntityMaInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) ee-ma(7)}

  EndEntityRaInterfacePDU
FROM Ieee1609Dot2EndEntityRaInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) ee-ra(8)}

  LaMaInterfacePDU
FROM Ieee1609Dot2LaMaInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) la-ma(9)}

  LaPcaInterfacePDU
FROM Ieee1609Dot2LaPcaInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) la-pca(10)}

  LaRaInterfacePDU
FROM Ieee1609Dot2LaRaInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) la-ra(11)}

  MaPcaInterfacePDU
FROM Ieee1609Dot2MaPcaInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) ma-pca(13)}

  MaRaInterfacePDU
FROM Ieee1609Dot2MaRaInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) ma-ra(14)}

  PcaRaInterfacePDU
FROM Ieee1609Dot2PcaRaInterface
{iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) scms(2) interfaces(1) pca-ra(15)}

  RaPgInterfacePDU
FROM Ieee1609Dot2RaPgInterface
{iso(1) identified-organization(3) ieee(111) 
standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
scms(2) interfaces(1) ra-pg(16)}

  CertificateChainFiles
FROM IEEE1609dot2-cert-chains {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) base (1) cert-chains (4)}

  PolicyFiles
FROM Ieee1609dot2ScmsPolicyTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
scms (2) interfaces(1) policy-types (500)}
;

--------------------------------
-- ScmsPDU
--
-- The top-level container for messages exchanged between SCMS components.
--
-- version    version of this PDU
-- ccm          for PDUs related to component certificate management
-- eca-ee       for PDUs exchanged between the ECA and an EE
-- ee-ma        for PDUs exchanged between an EE and the MA
-- ee-ra        for PDUs exchanged between an EE and the RA
-- la-ma        for PDUs exchanged between the LA and the MA
-- la-pca       for PDUs exchanged between the LA and the PCA
-- la-ra        for PDUs exchanged between the LA and the RA
-- ma-pca       for PDUs exchanged between the MA and the PCA
-- ma-ra        for PDUs exchanged between the MA and the RA
-- pca-ra       for PDUs exchanged between the PCA and the RA
-- ra-pg        for PDUs exchanged between the RA and the PG
--------------------------------
ScmsPDU ::= SEQUENCE {
  version  Uint8(1),
  content  CHOICE {
    ccm       ScmsComponentCertificateManagementPDU,
    eca-ee    EcaEndEntityInterfacePDU,
    ee-ma     EndEntityMaInterfacePDU,
    ee-ra     EndEntityRaInterfacePDU,
    la-ma     LaMaInterfacePDU,
    la-pca    LaPcaInterfacePDU,
    la-ra     LaRaInterfacePDU,
    ma-pca    MaPcaInterfacePDU,
    ma-ra     MaRaInterfacePDU,
    pca-ra    PcaRaInterfacePDU,
    ra-pg     RaPgInterfacePDU,
    ...
 }
}

--------------------------------
-- ScmsFile
--
-- Contains either a CertificateChainFiles or a PolicyFiles object. Provides
-- a standard object to be encapsulated in a Scoped PDU for certificate chain
-- and policy files.
--
-- version      version of this PDU
-- cert-chain   certificate chain files
-- policy       policy files
--------------------------------
ScmsFile ::= SEQUENCE {
  version Uint8(1),
  content CHOICE {
    cert-chain CertificateChainFiles,
    policy PolicyFiles,
    ...
  }
}

----------------------------------------------------------------------------
-- Scoped SCMS PDUs and SCMS Files
-- 
-- Each pair of communicating components has an associated interface defining
-- the necessary messages. The Scoped version of these messages is the 
-- associated ScmsPDU containing a given interface-specific message.
----------------------------------------------------------------------------

----------------------------------------------------------------------------
-- EE-CA (Scoped)
-- 
-- The Scoped version of:
--              obeEcaCertRequest
--              ecaObeCertResponse
--              rseEcaCertRequest
--              ecaRseCertResponse
----------------------------------------------------------------------------
ScopedObeEnrollmentCertRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      eca-ee (WITH COMPONENTS s{
        obeEcaCertRequest
      })
    })
 })

ScopedObeEnrollmentCertResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      eca-ee (WITH COMPONENTS {
        ecaObeCertResponse
      })
    })
 })

ScopedRseEnrollmentCertRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      eca-ee (WITH COMPONENTS {
        rseEcaCertRequest
      })
    })
 })

ScopedRseEnrollmentCertResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      eca-ee (WITH COMPONENTS {
        ecaRseCertResponse
      })
    })
 })

----------------------------------------------------------------------------
-- EE-MA (Scoped)
-- 
-- The Scoped version of:
--              misbehaviorReport
----------------------------------------------------------------------------
ScopedMisbehaviorReport ::=
  ScmsPDU (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ma (WITH COMPONENTS {
        misbehaviorReport
      })
    })
 })

----------------------------------------------------------------------------
-- EE-RA (Scoped)
-- 
-- The Scoped version of:
--              eeRaCertRequest
--              raEeCertResponse
--              eeRaPseudonymCertProvisioningRequest
--         raEePseudonymCertProvisioningAck
--         eeRaIdCertProvisioningRequest
--         raEeIdCertProvisioningAck
--        eeRaAppCertProvisioningRequest
--        raEeAppCertProvisioningAck
--        eeRaAuthenticatedDownloadRequest
--
-- Also contains Scoped versions of the following files:
--        globalCertificateChainFile
--        localCertificateChainFile
--        globalPolicyFile
--         localPolicyFile
----------------------------------------------------------------------------
ScopedEeRaCertRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ra (WITH COMPONENTS {
        eeRaCertRequest
      })
    })
 })

ScopedRaEeCertResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ra (WITH COMPONENTS {
        raEeCertResponse
      })
    })
 })

ScopedPseudonymCertProvisioningRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ra (WITH COMPONENTS {
        eeRaPseudonymCertProvisioningRequest
      })
    })
  })

ScopedPseudonymCertProvisioningAck ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ra (WITH COMPONENTS {
        raEePseudonymCertProvisioningAck
      })
    })
  })

ScopedIdCertProvisioningRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ra (WITH COMPONENTS {
        eeRaIdCertProvisioningRequest
      })
    })
  })

ScopedIdCertProvisioningAck ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ra (WITH COMPONENTS {
        raEeIdCertProvisioningAck
      })
    })
  })

ScopedAppCertProvisioningRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ra (WITH COMPONENTS {
        eeRaAppCertProvisioningRequest
      })
    })
  })

ScopedAppCertProvisioningAck ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ra (WITH COMPONENTS {
        raEeAppCertProvisioningAck
      })
    })
  })

ScopedGlobalCertificateChainFile ::=
  ScmsFile (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      cert-chain( WITH COMPONENTS {
        globalCertificateChainFile
       })
    })
  })

ScopedLocalCertificateChainFile ::=
  ScmsFile (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      cert-chain( WITH COMPONENTS {
        localCertificateChainFile
      })
    })
  })

ScopedGlobalPolicyFile ::=
  ScmsFile (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      policy( WITH COMPONENTS {
        globalPolicyFile
      })
    })
  })

ScopedLocalPolicyFile ::=
  ScmsFile (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      policy( WITH COMPONENTS {
        localPolicyFile
      })
    })
  })

ScopedAuthenticatedDownloadRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ee-ra (WITH COMPONENTS {
        eeRaAuthenticatedDownloadRequest
      })
    })
  })

----------------------------------------------------------------------------
-- LA-MA (Scoped)
-- 
-- The Scoped version of:
--        maLaLinkageInfoRequest
--        laMaLinkageInfoResponse
--        maLaLinkageSeedRequest
--        laMaLinkageSeedResponse
----------------------------------------------------------------------------
ScopedLIRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-ma (WITH COMPONENTS {
        maLaLinkageInfoRequest
      })
    })
  })


ScopedLIReply ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-ma (WITH COMPONENTS {
        laMaLinkageInfoResponse
      })
    })
  })

ScopedLSRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-ma (WITH COMPONENTS {
        maLaLinkageSeedRequest
      })
    })
  })

ScopedLSReply ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-ma (WITH COMPONENTS {
        laMaLinkageSeedResponse
      })
    })
  })


----------------------------------------------------------------------------
-- LA-PCA (Scoped)
-- 
-- The Scoped version of:
--        pcaLaKeyAgreementRequest
--         laPcaKeyAgreementResponse
--        pcaLaKeyAgreementAck
----------------------------------------------------------------------------
ScopedPcaLaKeyAgreementRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-pca (WITH COMPONENTS {
        pcaLaKeyAgreementRequest
      })
    })
  })

ScopedLaPcaKeyAgreementResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-pca (WITH COMPONENTS {
        laPcaKeyAgreementResponse
      })
    })
  })

ScopedPcaLaKeyAgreementAck ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-pca (WITH COMPONENTS {
        pcaLaKeyAgreementAck
      })
    })
  })

----------------------------------------------------------------------------
-- LA-RA (Scoped)
-- 
-- The Scoped version of:
--        raLaIndividualPreLinkageValueRequest
--        raLaGroupPreLinkageValueRequest
--         laRaPreLinkageValueResponse
----------------------------------------------------------------------------
ScopedRaLaIndividualPreLinkageValueRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-ra (WITH COMPONENTS {
        raLaIndividualPreLinkageValueRequest
      })
    })
  })

ScopedRaLaGroupPreLinkageValueRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-ra (WITH COMPONENTS {
        raLaGroupPreLinkageValueRequest
      })
    })
  })


ScopedLaRaPreLinkageValueResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      la-ra (WITH COMPONENTS {
        laRaPreLinkageValueResponse
      })
    })
  })

----------------------------------------------------------------------------
-- MA-PCA (Scoped)
-- 
-- The Scoped version of:
--        maPcaPreLinkageValueRequest
--        pcaMaPreLinkageValueResponse
--        maPcaHPCRRequest
--        pcaMaHPCRResponse
----------------------------------------------------------------------------
ScopedMaPcaPreLinkageValueRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-pca (WITH COMPONENTS {
        maPcaPreLinkageValueRequest
      })
    })
  })


ScopedPcaMaPreLinkageValueResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-pca (WITH COMPONENTS {
        pcaMaPreLinkageValueResponse
      })
    })
  })


ScopedMaPcaHPCRRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-pca (WITH COMPONENTS {
        maPcaHPCRRequest
      })
    })
  })


ScopedPcaMaHPCRResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-pca (WITH COMPONENTS {
        pcaMaHPCRResponse
      })
    })
  })

----------------------------------------------------------------------------
-- MA-RA (Scoped)
-- 
-- The Scoped version of:
--        maRaBlacklistRequest
--        raMaBlacklistResponse
--        maRaLCIRequest
--        raMaLCIResponse
--        maRaRseObeIdBlacklistRequest
--        raMaRseObeIdBlacklistResponse
----------------------------------------------------------------------------
ScopedBlacklistRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-ra (WITH COMPONENTS {
        maRaBlacklistRequest
      })
    })
  })

ScopedBlacklistResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-ra (WITH COMPONENTS {
        raMaBlacklistResponse
      })
    })
  })

ScopedLCIRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-ra (WITH COMPONENTS {
        maRaLCIRequest
      })
    })
  })


ScopedLCIResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-ra (WITH COMPONENTS {
        raMaLCIResponse
      })
    })
  })

  
ScopedRseObeIdBlacklistRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-ra (WITH COMPONENTS {
        maRaRseObeIdBlacklistRequest
      })
    })
  })


ScopedRseObeIdBlacklistResponse ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ma-ra (WITH COMPONENTS {
        raMaRseObeIdBlacklistResponse
      })
    })
  })

----------------------------------------------------------------------------
-- PCA-RA (Scoped)
-- 
-- The Scoped version of:
--        raPcaCertRequest
--        pcaRaCertResponse
----------------------------------------------------------------------------
ScopedRaPcaCertificateRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      pca-ra (WITH COMPONENTS {
        raPcaCertRequest
      })
    })
  })


ScopedPcaRaCertificateRequestReply ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      pca-ra (WITH COMPONENTS {
        pcaRaCertResponse
      })
    })
  })


----------------------------------------------------------------------------
-- RA-PG (Scoped)
-- 
-- The Scoped version of:
--        raPgPolicySignatureRequest
--         raPgPolicySignatureRequestReply
----------------------------------------------------------------------------
ScopedRaPgPolicySignatureRequest ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ra-pg (WITH COMPONENTS {
        raPgPolicySignatureRequest
      })
    })
  })


ScopedRaPgPolicySignatureRequestReply ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ra-pg (WITH COMPONENTS {
        raPgPolicySignatureRequestReply
      })
    })
  })

----------------------------------------------------------------------------
-- ScopedCertificateRequest
--
-- A single container for each of the individual scoped certificate requests.
-- Allows for the definition of a single SignedCertificateRequest type that
-- contains a ScopedCertificateRequest.
----------------------------------------------------------------------------
  ScopedCertificateRequest ::= ScmsPDU (
     ScopedEeRaCertRequest |
     ScopedObeEnrollmentCertRequest |
     ScopedRseEnrollmentCertRequest |
     ScopedPseudonymCertProvisioningRequest |
     ScopedIdCertProvisioningRequest  |
     ScopedAppCertProvisioningRequest  |
     ScopedRaPcaCertificateRequest |
     ScopedAuthenticatedDownloadRequest )



----------------------------------------------------------------------------
-- Secured SCMS PDUs and SCMS Files
-- 
-- Each of the Scoped messages defined above has a corresponding secured
-- version. Each secured PDU is an Ieee1609dot2Data whose content is either
-- signed data or encrypted data. 
-- 
-- A Signed*** PDU has content of type SignedData or SignedCertificateRequest
--
-- A Secured*** PDU has content of type EncryptedData which decrypts to
-- the corresponding Signed*** PDU (with a few exceptions).
----------------------------------------------------------------------------
SecuredScmsPDU ::= Ieee1609Dot2Data


--------------------------------
-- SignedCertificateRequest
--
-- hashId        identifies which hash algorithm was used to compute the digest
-- tbsRequest    the tbs data containing the certificate
-- signer        information about the entity that signed the request
-- signature    the signature, computed on a digest of the tbsRequest
--------------------------------
SignedCertificateRequest ::= SEQUENCE  {
    hashId          HashAlgorithm,
    tbsRequest      ScopedCertificateRequest,
    signer          SignerIdentifier,
    signature       Signature
}


----------------------------------------------------------------------------
-- EE-ECA (Secured)
--
-- The Signed and Secured versions of:
--        ScopedObeEnrollmentCertRequest (contains obeEcaCertRequest)
--        ScopedObeEnrollmentCertResponse (contains ecaObeCertResponse)
--        ScopedRseEnrollmentCertRequest (contains rseEcaCertRequest)
--        ScopedRseEnrollmentCertResponse (contains ecaRseCertResponse)
----------------------------------------------------------------------------

--------------------------------
-- SignedObeEnrollmentCertRequest
--
-- A self-signed request from an OBE to an ECA to request a signature on the 
-- enclosed enrollment certificate.
--
-- Contains a self-signed ScopedObeEnrollmentCertRequest, which contains 
-- an obeEcaCertRequest.
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedObeEnrollmentCertRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedCertificateRequest  (CONTAINING
      SignedCertificateRequest (WITH COMPONENTS {...,
        tbsRequest (ScopedObeEnrollmentCertRequest),
        signer (WITH COMPONENTS {
          self
        })
      })
    )
  })
})

--------------------------------
-- SignedObeEnrollmentCertResponse / SecuredObeEnrollmentCertResponse
--
-- A signed response from the ECA to an OBE containing a signed enrollment
-- certificate.
--
-- Contains a signed ScopedObeEnrollmentCertResponse, which contains 
-- an ecaObeCertResponse. The header contains the following:
--        psid = SecurityMgmtPsid
--
-- SecuredObeEnrollmentCertResponse is encrypted using the (optional)
-- encryption key in the enrollment certificate. Decrypts to a 
-- SignedObeEnrollmentCertResponse.
--------------------------------
SignedObeEnrollmentCertResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedObeEnrollmentCertResponse)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredObeEnrollmentCertResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData    -- decrypts to a SignedObeEnrollmentCertResponse
  })
})

--------------------------------
-- SignedRseEnrollmentCertRequest
--
-- A self-signed request from a RSE to an ECA to request a signature on the 
-- enclosed enrollment certificate.
--
-- Contains a self-signed ScopedRseEnrollmentCertRequest, which contains 
-- an rseEcaCertRequest.
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedRseEnrollmentCertRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedCertificateRequest  (CONTAINING
      SignedCertificateRequest (WITH COMPONENTS {...,
        tbsRequest (ScopedRseEnrollmentCertRequest),
        signer (WITH COMPONENTS {
          self
        })
      })
    )
  })
})

--------------------------------
-- SignedRseEnrollmentCertResponse / SecuredRseEnrollmentCertResponse
--
-- A self-signed request from a RSE to an ECA to request a signature on the 
-- enclosed enrollment certificate.
--
-- Contains a signed ScopedRseEnrollmentCertResponse, which contains 
-- an ecaRseCertResponse. The header contains the following:
--        psid = SecurityMgmtPsid
--
-- SecuredRseEnrollmentCertResponse is encrypted using the encryption key
-- in the enrollment certificate. Decrypts to a 
-- SignedRseEnrollmentCertResponse. 
--------------------------------
SignedRseEnrollmentCertResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedRseEnrollmentCertResponse)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredRseEnrollmentCertResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedEcaRseEnrollmentCertResponse
  })
})

----------------------------------------------------------------------------
-- EE-MAs (Secured)
--
-- The Signed and Secured versions of:
--        ScopedMisbehaviorReport (contains misbehaviorReport)
----------------------------------------------------------------------------

--------------------------------
-- SignedMisbehaviorReport / SecuredMisbehaviorReport
--
-- A signed message containing a misbehavior report. Sent from an EE to the MA.
--
-- Contains a signed ScopedMisbehaviorReport, which contains a
-- misbehaviorReport. The header contains the following:
--        psid = MisbehaviorReportingPsid
--
-- SecuredMisbehaviorReport is encrypted using the encryption key in the MA 
-- certificate, and decrypts to a SignedMisbehaviorReport. 
--------------------------------
SignedMisbehaviorReport ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedMisbehaviorReport)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (MisbehaviorReportingPsid),
          generationTime PRESENT,
          expiryTime ABSENT,
          generationLocation PRESENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      }),
      signer (WITH COMPONENTS {...,
        certificate (SequenceOfCertificate (SIZE(1))) -- reporter's pseudonym cert
      })
    })
  })
})

SecuredMisbehaviorReport ::= SecuredScmsPDU(WITH COMPONENTS {...,
  content(WITH COMPONENTS {...,
    encryptedData -- decrypts to a SignedMisbehaviorReport
  })
})

----------------------------------------------------------------------------
-- EE-RA (Secured)
--
-- The Signed and Secured versions of:
--        ScopedEeRaCertRequest (contains eeRaCertRequest)
--        ScopedRaEeCertResponse (contains raEeCertResponse)
--         ScopedPseudonymCertProvisioningRequest 
--            (contains eeRaPseudonymCertProvisioningRequest)
--        ScopedPseudonymCertProvisioningAck 
--            (contains raEePseudonymCertProvisioningAck)
--        ScopedIdCertProvisioningRequest 
--            (contains eeRaIdCertProvisioningRequest)
--        ScopedIdCertProvisioningAck (contains raEeIdCertProvisioningAck)
--        ScopedAppCertProvisioningRequest 
--            (contains eeRaAppCertProvisioningRequest)
--        ScopedAppCertProvisioningAck (contains raEeAppCertProvisioningAck) 
--        ScopedGlobalCertificateChainFile (contains globalCertificateChainFile)
--         ScopedLocalCertificateChainFile (contains localCertificateChainFile)
--        ScopedGlobalPolicyFile (contains globalPolicyFile)
--        ScopedLocalPolicyFile (contains localPolicyFile)
--        ScopedAuthenticatedDownloadRequest
--            (contains eeRaAuthenticatedDownloadRequest)
----------------------------------------------------------------------------

--------------------------------
-- SecuredRACertRequest
--
-- An unsecured message containing a request by an EE for the RA's certificate.
--------------------------------
SecuredRACertRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    unsecuredData (CONTAINING ScopedEeRaCertRequest)
  })
})

--------------------------------
-- SecuredRACertResponse
--
-- An unsecured message containing the RA's certificate, as requested by an EE.
--------------------------------
SecuredRACertResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    unsecuredData (CONTAINING ScopedRaEeCertResponse)
  })
})

--------------------------------
-- SignedPseudonymCertProvisioningRequest / 
-- SecuredPseudonymCertProvisioningRequest
--
-- Sent to the RA by an EE in order to request the provisioning of pseudonym
-- certificates.
--
-- Contains a signed ScopedPseudonymCertProvisioningRequest, signed using
-- the EE's enrollment certificate.
--
-- SecuredPseudonymCertProvisioningRequest is encrypted to the RA and
-- decrypts to a SignedPseudonymCertProvisioningRequest.
--------------------------------
SignedPseudonymCertProvisioningRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedCertificateRequest  (CONTAINING
      SignedCertificateRequest (WITH COMPONENTS {...,
        tbsRequest (ScopedPseudonymCertProvisioningRequest),
        signer (WITH COMPONENTS {
          certificate (SequenceOfCertificate (SIZE(1))) -- Enrollment cert
        })
      })
    )
  })
})

SecuredPseudonymCertProvisioningRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedPseudonymCertProvisioningRequest
  })
})

--------------------------------
-- SignedPseudonymCertProvisioningAck / SecuredPseudonymCertProvisioningAck
--
-- Sent by the RA to an EE in order to acknowledge the receipt of a pseudonym
-- certificate provisioning request.
--
-- Contains a signed ScopedPseudonymCertProvisioningAck, signed using
-- the RA's certificate with
--        psid = SecurityMgmtPsid
--
-- SecuredPseudonymCertProvisioningAck is encrypted to the EE and
-- decrypts to a SignedPseudonymCertProvisioningAck.
--------------------------------
SignedPseudonymCertProvisioningAck ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedPseudonymCertProvisioningAck)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredPseudonymCertProvisioningAck ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedPseudonymCertProvisioningAck
  })
})

--------------------------------
-- SignedIdCertProvisioningRequest / SecuredIdCertProvisioningRequest
--
-- Sent to the RA by an EE in order to request the provisioning of an ID
-- certificate.
--
-- Contains a signed ScopedIdCertProvisioningRequest, signed using
-- the EE's enrollment certificate.
--
-- SecuredIdCertProvisioningRequest is encrypted to the RA and
-- decrypts to a SignedIdCertProvisioningRequest.
--------------------------------
SignedIdCertProvisioningRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedCertificateRequest  (CONTAINING
      SignedCertificateRequest (WITH COMPONENTS {...,
        tbsRequest (ScopedIdCertProvisioningRequest),
        signer (WITH COMPONENTS {
          certificate (SequenceOfCertificate (SIZE(1))) -- Enrollment cert
        })
      })
    )
  })
})

SecuredIdCertProvisioningRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedIdCertProvisioningRequests
  })
})

--------------------------------
-- SignedIdCertProvisioningAck / SecuredIdCertProvisioningAck
--
-- Sent by the RA to an EE in order to acknowledge the receipt of a ID
-- certificate provisioning request.
--
-- Contains a signed ScopedIdCertProvisioningAck, signed using
-- the RA's certificate, with
--        psid = SecurityMgmtPsid
--
-- SecuredIdCertProvisioningAck is encrypted to the EE and
-- decrypts to a SignedIdCertProvisioningAck.
--------------------------------
SignedIdCertProvisioningAck ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedIdCertProvisioningAck)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredIdCertProvisioningAck ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedIdCertProvisioningAck
  })
})

--------------------------------
-- SignedAppCertProvisioningRequest / SecuredAppCertProvisioningRequest
--
-- Sent by a RSE to the RA to request the provisioning of application 
-- certificates.
--
-- Contains a signed ScopedAppCertProvisioningRequest, signed using
-- the RSE's enrollment certificate.
--
-- SecuredAppCertProvisioningRequest is encrypted to the RA and
-- decrypts to a SignedAppCertProvisioningRequest.
--------------------------------
SignedAppCertProvisioningRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedCertificateRequest  (CONTAINING
      SignedCertificateRequest (WITH COMPONENTS {...,
        tbsRequest (ScopedAppCertProvisioningRequest),
        signer (WITH COMPONENTS {
          certificate (SequenceOfCertificate (SIZE(1))) -- Enrollment cert
        })
      })
    )
  })
})

SecuredAppCertProvisioningRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedAppCertProvisioningRequest
  })
})

--------------------------------
-- SignedAppCertProvisioningAck / SecuredAppCertProvisioningAck
--
-- Sent by the RA to a RSE in order to acknowledge the receipt of an
-- application certificate provisioning request.
--
-- Contains a signed ScopedAppCertProvisioningAck, signed using
-- the EE's enrollment certificate, with
--        psid = SecurityMgmtPsid
--
-- SecuredAppCertProvisioningAck is encrypted to the EE and
-- decrypts to a SignedAppCertProvisioningAck.
--------------------------------
SignedAppCertProvisioningAck ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedAppCertProvisioningAck)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredAppCertProvisioningAck ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedAppCertProvisioningAck
  })
})

--------------------------------
-- SignedAuthenticatedDownloadRequest
--
-- Sent by an EE to the RA in order to request the download of a file. Used,
-- for example, to request policy files, certificate chain files, pseudonym
-- certificate batch files, application certificate files, etc. Contains a
-- ScopedAuthenticatedDownloadRequest signed using the EE's enrollment
-- certificate.
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedAuthenticatedDownloadRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedCertificateRequest  (CONTAINING
      SignedCertificateRequest (WITH COMPONENTS {...,
        tbsRequest (ScopedAuthenticatedDownloadRequest),
        signer (WITH COMPONENTS {
          certificate (SequenceOfCertificate (SIZE(1))) -- Enrollment cert
        })
      })
    )
  })
})

--------------------------------
-- SignedGlobalPolicyFile
--
-- Contains a ScopedGlobalPolicyFile signed by the RA.
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedGlobalPolicyFile ::= Ieee1609Dot2Data( WITH COMPONENTS{...,
    content( WITH COMPONENTS{...,
      signedData( WITH COMPONENTS{...,
        tbsData( WITH COMPONENTS{...,
          payload( WITH COMPONENTS{...,
            data( WITH COMPONENTS{...,
              content( WITH COMPONENTS{...,
                unsecuredData( CONTAINING ScopedGlobalPolicyFile )
              })
            })
          })
        })
      })
   })
})

--------------------------------
-- SignedLocalPolicyFile
--
-- Contains a ScopedLocalPolicyFile signed by the RA.
--
-- There is no corresponding encrypted PDU defined.
--------------------------------s
SignedLocalPolicyFile ::= Ieee1609Dot2Data( WITH COMPONENTS{...,
    content( WITH COMPONENTS{...,
      signedData( WITH COMPONENTS{...,
        tbsData( WITH COMPONENTS{...,
          payload( WITH COMPONENTS{...,
            data( WITH COMPONENTS{...,
              content( WITH COMPONENTS{...,
                unsecuredData( CONTAINING ScopedLocalPolicyFile )
              })
            })
          })
        })
      })
   })
})

----------------------------------------------------------------------------
-- LA-MA (Secured)
--
-- The Signed and Secured versions of:
--        ScopedLIRequest (contains maLaLinkageInfoRequest)
--        ScopedLIReply (contains laMaLinkageInfoResponse)
--        ScopedLSRequest (contains maLaLinkageSeedRequest)
--        ScopedLSReply (contains laMaLinkageSeedResponse)
----------------------------------------------------------------------------

--------------------------------
-- SignedLIRequest / SecuredLIRequest
--
-- Sent by the MA to the LA to request information about the correlation of
-- pre-linkage values originating from EEs in the same linkage chain.
--
-- Contains a ScopedLIRequest signed using the MA certificate with
--        psid = SecurityMgmtPsid
--
-- SecuredLIRequest is encrypted to the LA and decrypts to a SignedLIRequest.
--------------------------------
SignedLIRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedLIRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredLIRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedLIRequest
  })
})

--------------------------------
-- SignedLIReply / SecuredLIReply
--
-- Sent by the LA to the MA in response to a ScopedLIRequest.
--
-- Contains a ScopedLIReply signed using the LA certificate with
--        psid = SecurityMgmtPsid
--
-- SecuredLIReply is encrypted to the MA and decrypts to a SignedLIRequest.
--------------------------------
SignedLIReply ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedLIReply)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredLIReply ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedLIReply
  })
})

--------------------------------
-- SignedLSRequest / SecuredLSRequest
--
-- Sent by the MA to the LA to request the linkage seed in response
-- to a misbehavior report.
--
-- Contains a ScopedLIRequest signed using the MA certificate with
--        psid = SecurityMgmtPsid
--
-- SecuredLIRequest is encrypted to the LA and decrypts to a SignedLIRequest.
--------------------------------
SignedLSRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedLSRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredLSRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedLSRequest
  })
})

--------------------------------
-- SignedLSReply / SecuredLSReply
--
-- Sent by the LA to the MA in response to a ScopedLSRequest.
--
-- Contains a ScopedLSReply signed using the LA certificate with
--        psid = SecurityMgmtPsid
--
-- SecuredLSReply is encrypted to the MA and decrypts to a SignedLSRequest.
--------------------------------
SignedLSReply ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedLSReply)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredLSReply ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedLSReply
  })
})



----------------------------------------------------------------------------
-- LA-PCA (Secured)
--
-- The Signed and Secured versions of:s
--        ScopedPcaLaKeyAgreementRequest (contains pcaLaKeyAgreementRequest)
--        ScopedLaPcaKeyAgreementResponse (contains laPcaKeyAgreementResponse)
--        SignedPcaLaKeyAgreementAck (contains pcaLaKeyAgreementAck)
----------------------------------------------------------------------------

--------------------------------
-- SignedPcaLaKeyAgreementRequest
--
-- Sent by the PCA to the LA in order to initiate the establishement of a
-- shared key.
-- 
-- Contains a ScopedPcaLaKeyAgreementRequest signed by the PCA, with
--        psid = SecurityMgmtPsid
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedPcaLaKeyAgreementRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedPcaLaKeyAgreementRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

--------------------------------
-- SignedLaPcaKeyAgreementResponse
--
-- Sent by the LA to the PCA in response of a key agreement request.
-- 
-- Contains a ScopedLaPcaKeyAgreementResponse signed by the LA, with
--        psid = SecurityMgmtPsid
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedLaPcaKeyAgreementResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedLaPcaKeyAgreementResponse)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

--------------------------------
-- SignedPcaLaKeyAgreementAck
--
-- Sent by the PCA to the LA to acknowledge the successul establishement
-- of a shared key.s
-- 
-- Contains a ScopedPcaLaKeyAgreementAck signed by the PCA, with
--        psid = SecurityMgmtPsid
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedPcaLaKeyAgreementAck ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedPcaLaKeyAgreementAck)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})


----------------------------------------------------------------------------
-- LA-RA (Secured)
--
-- The Signed and Secured versions of:
--        ScopedRaLaIndividualPreLinkageValueRequest
--            (contains raLaIndividualPreLinkageValueRequest)
--        ScopedRaLaGroupPreLinkageValueRequest
--            (contains raLaGroupPreLinkageValueRequest)
--        ScopedLaRaPreLinkageValueResponse (contains laRaPreLinkageValueResponse)
--
-- Generation time present in each message to prevent replay. Keep message for
-- replay check until time corresponding to iMin has been reached.
----------------------------------------------------------------------------

--------------------------------
-- SignedRaLaIndividualPreLinkageValueRequest
--
-- Sent by the RA to the LA to request an individual pre-linkage value.
--
-- Contains a ScopedRaLaIndividualPreLinkageValueRequest signed by the RA, with
--        psid = SecurityMgmtPsid
--         generationTime PRESENT
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedRaLaIndividualPreLinkageValueRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedRaLaIndividualPreLinkageValueRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime PRESENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

--------------------------------
-- SignedRaLaGroupPreLinkageValueRequest
--
-- Sent by the RA to the LA to request a group pre-linkage value.
--
-- Contains a ScopedRaLaGroupPreLinkageValueRequest signed by the RA, with
--        psid = SecurityMgmtPsid
--         generationTime PRESENT
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedRaLaGroupPreLinkageValueRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedRaLaGroupPreLinkageValueRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime PRESENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

--------------------------------
-- SignedLaRaPreLinkageValueResponse
--
-- Sent by the LA to the RA in response to a request for pre-linkage values.
--
-- Contains a ScopedLaRaPreLinkageValueResponse signed by the LA, with
--        psid = SecurityMgmtPsid
--         generationTime PRESENT
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedLaRaPreLinkageValueResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedLaRaPreLinkageValueResponse)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime PRESENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})


----------------------------------------------------------------------------
-- MA-PCA (Secured)
--
-- The Signed and Secured versions of:
--        ScopedMaPcaPreLinkageValueRequest 
--            (contains maPcaPreLinkageValueRequest)
--        ScopedPcaMaPreLinkageValueResponse 
--            (contains pcaMaPreLinkageValueResponse)
--        ScopedMaPcaHPCRRequest (contains maPcaHPCRRequest)
--        ScopedPcaMaHPCRResponse (contains pcaMaHPCRResponse)
----------------------------------------------------------------------------

--------------------------------
-- SignedMaPcaPreLinkageValueRequest / SecuredMaPcaPreLinkageValueRequest
--
-- Sent by the MA to the PCA to request pre-linkage values due to a
-- misbehavior report.
--
-- Contains a ScopedMaPcaPreLinkageValueRequest signed by the MA, with
--        psid = SecurityMgmtPsid
--
-- SecuredMaPcaPreLinkageValueRequest is encrypted to the PCA and decrypts
-- to a SignedMaPcaPreLinkageValueRequest.
--------------------------------
SignedMaPcaPreLinkageValueRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedMaPcaPreLinkageValueRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredMaPcaPreLinkageValueRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedMaPcaPreLinkageValueRequest
  })
})

--------------------------------
-- SignedPcaMaPreLinkageValueResponse / SecuredPcaMaPreLinkageValueResponse
--
-- Sent by the PCA to the MA in response to a request for pre-linkage values.
--
-- Contains a ScopedPcaMaPreLinkageValueResponse signed by the PCA, with
--        psid = SecurityMgmtPsid
--
-- SecuredPcaMaPreLinkageValueResponse is encrypted to the MA and decrypts
-- to a SignedPcaMaPreLinkageValueResponse.
--------------------------------
SignedPcaMaPreLinkageValueResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedPcaMaPreLinkageValueResponse)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredPcaMaPreLinkageValueResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedPcaMaPreLinkageValueResponse
  })
})

--------------------------------
-- SignedMaPcaHPCRRequest / SecuredMaPcaHPCRRequest
--
-- Sent by the MA to the PCA to request the hash of a pseudonym certificate
-- provisioning request (HPCR).
--
-- Contains a ScopedMaPcaHPCRRequest signed by the MA, with
--        psid = SecurityMgmtPsid
--
-- SecuredMaPcaHPCRRequest is encrypted to the PCA and decrypts
-- to a SignedMaPcaHPCRRequest.
--------------------------------
SignedMaPcaHPCRRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedMaPcaHPCRRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredMaPcaHPCRRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedMaPcaHPCRRequest
  })
})

--------------------------------
-- SignedPcaMaHPCRResponse / SecuredPcaMaHPCRResponse
--
-- Sent by the PCA to the MA in response to a request for the hash of a
-- pseudonym certificate provisioning request (HPCR).
--
-- Contains a SecuredPcaMaHPCRResponse signed by the PCA, with
--        psid = SecurityMgmtPsid
--
-- SecuredPcaMaHPCRResponse is encrypted to the MA and decrypts
-- to a SignedPcaMaHPCRResponse.
--------------------------------
SignedPcaMaHPCRResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedPcaMaHPCRResponse)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredPcaMaHPCRResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedPcaMaHPCRResponse
  })
})


----------------------------------------------------------------------------
-- MA-RA (Secured)
--
-- The Signed and Secured versions of:
--        ScopedBlacklistRequest (contains maRaBlacklistRequest)
--        ScopedBlacklistResponse (contains raMaBlacklistResponse)
--        ScopedLCIRequest (contains maRaLCIRequest)
--        ScopedLCIResponse(contains raMaLCIResponse)
--        ScopedRseObeIdBlacklistRequest (contains maRaRseObeIdBlacklistRequest)
--        ScopedRseObeIdBlacklistResponse 
--            (contains raMaRseObeIdBlacklistResponse) 
----------------------------------------------------------------------------

--------------------------------
-- SignedBlacklistRequest / SecuredBlacklistRequest
--
-- Sent by the MA to the RA to indicate that a given EE should be added
-- to its blacklist.
--
-- Contains a ScopedBlacklistRequest signed by the MA, with
--        psid = SecurityMgmtPsid
--
-- SecuredBlacklistRequest is encrypted to the RA and decrypts to a 
-- SignedBlacklistRequest.
--------------------------------
SignedBlacklistRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedBlacklistRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredBlacklistRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedBlacklistRequest
  })
})

--------------------------------
-- SignedBlacklistResponse / SecuredBlacklistResponse
--
-- Sent by the RA to the MA in response to a blacklist request.
--
-- Contains a ScopedBlacklistResponse signed by the RA, with
--        psid = SecurityMgmtPsid
--
-- SecuredBlacklistResponse is encrypted to the MA and decrypts to a 
-- SignedBlacklistResponse.
--------------------------------
SignedBlacklistResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedBlacklistResponse)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredBlacklistResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedBlacklistResponse
  })
})

--------------------------------
-- SignedRseObeIdBlacklistRequest / SecuredRseObeIdBlacklistRequest
--
-- Sent by the MA to the RA to indicate that a given EE should be added
-- to its blacklist.
--
-- Contains a ScopedRseObeIdBlacklistRequest signed by the MA, with
--        psid = SecurityMgmtPsid
--
-- SecuredRseObeIdBlacklistRequest is encrypted to the RA and decrypts to a 
-- SignedRseObeIdBlacklistRequest.
--------------------------------
SignedRseObeIdBlacklistRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedRseObeIdBlacklistRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredRseObeIdBlacklistRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedRseObeIdBlacklistRequest
  })
})

--------------------------------
-- SignedRseObeIdBlacklistResponse / SecuredRseObeIdBlacklistResponse
--
-- Sent by the RA to the MA in response to a blacklist request.
--
-- Contains a ScopedBlacklistResponse signed by the RA, with
--        psid = SecurityMgmtPsid
--
-- SecuredRseObeIdBlacklistResponse is encrypted to the MA and decrypts to a 
-- SignedRseObeIdBlacklistResponse.
--------------------------------
SignedRseObeIdBlacklistResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedBlacklistResponse)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredRseObeIdBlacklistResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedRseObeIdBlacklistResponse
  })
})

--------------------------------
-- SignedLCIRequest / SecuredLCIRequest
--
-- Sent by the MA to the RA to request linkage chain identifiers associated
-- with an EE.
--
-- Contains a ScopedLCIRequest signed by the MA, with
--        psid = SecurityMgmtPsid
--
-- SecuredLCIRequest is encrypted to the RA and decrypts to a 
-- SignedLCIRequest.
--------------------------------
SignedLCIRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedLCIRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredLCIRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedLCIRequest
  })
})

--------------------------------
-- SignedLCIResponse / SecuredLCIResponse
--
-- Sent by the RA to the MA in response to a linkage chain identifier request.
--
-- Contains a ScopedLCIResponse signed by the RA, with
--        psid = SecurityMgmtPsid
--
-- SecuredLCIResponse is encrypted to the MA and decrypts to a 
-- SignedLCIResponse.
--------------------------------
SignedLCIResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedLCIResponse)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredLCIResponse ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedLCIResponse
  })
})


----------------------------------------------------------------------------
-- PCA-RA (Secured)
--
-- The Signed and Secured versions of:
--         ScopedRaPcaCertificateRequest (contains raPcaCertRequest)
--         ScopedPcaRaCertificateRequestReply (contains pcaRaCertResponse)
----------------------------------------------------------------------------

--------------------------------
-- SecuredRaPcaCertificateRequest
--
-- Sent by the RA to the PCA to request a certificate.
--
-- Contains a ScopedRaPcaCertificateRequest signed by the RA, with
--        psid = SecurityMgmtPsid
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SecuredRaPcaCertificateRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedCertificateRequest  (CONTAINING
      SignedCertificateRequest (WITH COMPONENTS {...,
        tbsRequest (ScopedRaPcaCertificateRequest),
        signer (WITH COMPONENTS {
          certificate (SequenceOfCertificate (SIZE(1)) -- RA 1609.2 cert
          )
--          certificate (SequenceOfCertificate (SIZE(1)) (CONSTRAINED BY {
--              Certificate(EndEntityEnrollmentPseudonymCertificate)
--          }))
        })
      })
    )
  })
})

--------------------------------
-- SecuredPcaRaCertificateRequestReply
--
-- Sent by the PCA to the RA in response to a certificate request.
--
-- Contains a ScopedPcaRaCertificateRequestReply signed by the PCA, with
--        psid = SecurityMgmtPsid
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SecuredPcaRaCertificateRequestReply ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedPcaRaCertificateRequestReply)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})


----------------------------------------------------------------------------
-- RA-PG (Secured)
--
-- The Signed and Secured versions of:
--        ScopedRaPgPolicySignatureRequest (contains raPgPolicySignatureRequest)
--        ScopedRaPgPolicySignatureRequestReply
--            (contains raPgPolicySignatureRequestReply)
----------------------------------------------------------------------------

--------------------------------
-- SignedRaPgPolicySignatureRequest / SecuredRaPgPolicySignatureRequest
--
-- Sent by the RA to the PG to request that a policy file be signed.
--
-- Contains a ScopedRaPgPolicySignatureRequest signed by the RA, with
--        psid = SecurityMgmtPsid
--
-- A SecuredRaPgPolicySignatureRequest is encrypted to the PG and decrypts
-- to a SignedRaPgPolicySignatureRquest.
--------------------------------
SignedRaPgPolicySignatureRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedRaPgPolicySignatureRequest)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredRaPgPolicySignatureRequest ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedRaPgPolicySignatureRquest
  })
})

--------------------------------
-- SignedRaPgPolicySignatureRequestReply / SecuredRaPgPolicySignatureRequestReply
--
-- Sent by the PG to the RA in response to a policy signature request.s
--
-- Contains a ScopedRaPgPolicySignatureRequestReply signed by the RA, with
--        psid = SecurityMgmtPsid
--
-- A SecuredRaPgPolicySignatureRequestReply is encrypted to the PG and decrypts
-- to a SignedRaPgPolicySignatureRequestReply.
--------------------------------
SignedRaPgPolicySignatureRequestReply ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
          data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedRaPgPolicySignatureRequestReply)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime ABSENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})

SecuredRaPgPolicySignatureRequestReply ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    encryptedData  -- decrypts to a SignedRaPgPolicySignatureRequestReply
  })
})


----------------------------------------------------------------------------
-- Root Management / Electors (Secured)
--
-- The Signed and Secured versions of:
--         ScopedElectorEndorsement (contains tbsElectorEndorsement)
----------------------------------------------------------------------------

--------------------------------
-- ScopedElectorEndorsement
-- 
-- The scoped version of a tbsElectorEndorsement.
--------------------------------
ScopedElectorEndorsement ::=
  ScmsPDU  (WITH COMPONENTS {...,
    content (WITH COMPONENTS {
      ccm (WITH COMPONENTS {
        tbsElectorEndorsement
      })
    })
 })

--------------------------------
-- SignedElectorEndorsement
--
-- Contains the signed version of a ScopedElectorEndorsement, which contains
-- a tbsElectorEndorsement, with 
--        psid = SecurityMgmtPsid
--
-- There is no corresponding encrypted PDU defined.
--------------------------------
SignedElectorEndorsement ::= SecuredScmsPDU (WITH COMPONENTS {...,
  content (WITH COMPONENTS {...,
    signedData  (WITH COMPONENTS {...,
      tbsData (WITH COMPONENTS {...,
        payload (WITH COMPONENTS {...,
         data (WITH COMPONENTS {...,
             content (WITH COMPONENTS {
                unsecuredData (CONTAINING ScopedElectorEndorsement)
            })
          })
        }),
        headerInfo (WITH COMPONENTS {...,
          psid (SecurityMgmtPsid),
          generationTime PRESENT,
          expiryTime ABSENT,
          generationLocation ABSENT,
          p2pcdLearningRequest ABSENT,
          missingCrlIdentifier ABSENT,
          encryptionKey ABSENT
        })
      })
    })
  })
})



----------------------------------------------------------------------------
-- Service Specific Permissions (SSP)
--
-- Defines the type for he SSP of each SCMS component. Each SSP is currently 
-- defined as an 8-bit unsigned integer.
----------------------------------------------------------------------------
ScmsSsp ::= CHOICE {
  elector ElectorSsp,
  root RootCaSsp,
  pg   PGSsp,
  ica  IcaSsp,
  eca  EcaSsp,
  pca  PcaSsp,
  crl  CrlSignerSsp,
  dcm  DcmSsp,
  la   LaSsp,
  lop  LopSsp,
  ma   MaSsp,
  ra   RaSsp,
  ...
}

ElectorSsp ::= SEQUENCE {
  version Uint8(1),
  ...
}

RootCaSsp ::= SEQUENCE {
  version Uint8(1),
  ...
}

PGSsp ::= SEQUENCE {
  version Uint8(1),
  ...
}

IcaSsp ::= SEQUENCE {
  version Uint8(1),
  ...
}

EcaSsp ::= SEQUENCE {
  version Uint8(1),
  ...
}

PcaSsp ::= SEQUENCE {
  version Uint8(1),
  ...
}

CrlSignerSsp ::= SEQUENCE {
  version Uint8(1),
  ...
}

DcmSsp ::= SEQUENCE {
  version Uint8(1),
  ...
}

LaSsp ::= SEQUENCE {
  version Uint8(1),
  laId Uint16,
  ...
}

LopSsp ::= SEQUENCE {
  version Uint8(1),
  ...
}

MaSsp ::= SEQUENCE {
  version        Uint8(1),
  relevantPsids  SequenceOfPsid,
  ...
}

RaSsp ::= SEQUENCE {
  version  Uint8(1),
  ...
}



END
