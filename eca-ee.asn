
Ieee1609Dot2EcaEndEntityInterface
{iso(1) identified-organization(3) ieee(111) 
standards-association-numbered-series-standards(2) wave-stds(1609)  
dot2(2) scms(2) interfaces(1) eca-ee (5)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS

  CrlSeries,
  EccP256CurvePoint,
  GeographicRegion,
  HashedId3,
  HashedId8,
  Hostname,
  PublicEncryptionKey,
  SubjectAssurance,
  Time32,
  Uint8,
  Uint16

FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111) 
	 standards-association-numbered-series-standards(2) wave-stds(1609)  
	 dot2(2) base(1) base-types(2)}

  Certificate,
  CertificateId,
  ImplicitCertificate,
  SequenceOfPsidGroupPermissions,
  SequenceOfPsidSsp,
  ValidityPeriod,
  VerificationKeyIndicator

FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111) 
	 standards-association-numbered-series-standards(2) wave-stds(1609)  
	 dot2(2) base (1) schema (1)}

  ;

EcaEndEntityInterfacePDU::= CHOICE {
    obeEcaCertRequest     ObeEcaEnrollmentCertificateRequest,
    ecaObeCertResponse    EcaObeEnrollmentCertificateResponse,
    rseEcaCertRequest     RseEcaEnrollmentCertificateRequest,
    ecaRseCertResponse    EcaRseEnrollmentCertificateResponse,
    ...
}

-------------------------------------------------------------------------------
-- Requests / Responses
-------------------------------------------------------------------------------

-- signer field in verifyKey contains the enrolment cert

CommonEnrollmentCertificateRequest ::= SEQUENCE {
    version             Uint8(1),
    currentTime         Time32,
    requestedStartTime  Time32,
    tbsData             ToBeSignedEnrollmentCertificateData,
    verifyKey           EccP256CurvePoint,
    ...
}

CommonEnrollmentCertificateResponse ::= SEQUENCE {
	version         Uint8(1),
    requestHash     HashedId8,  -- hash of the original request
    ecaCert         Certificate,
    enrollmentCert  ImplicitCertificate,
    raCert          Certificate,
    raHostname      Hostname,
    ...
}

ToBeSignedEnrollmentCertificateData ::= SEQUENCE  { 
    id                     CertificateId,
    cracaId                HashedId3,
    crlSeries              CrlSeries,
    validityPeriod         ValidityPeriod,
    region                 GeographicRegion OPTIONAL,
    assuranceLevel         SubjectAssurance OPTIONAL,
    appPermissions         SequenceOfPsidSsp OPTIONAL,
    certIssuePermissions   SequenceOfPsidGroupPermissions OPTIONAL,
    certRequestPermissions SequenceOfPsidGroupPermissions OPTIONAL, 
    canRequestRollover     NULL OPTIONAL,
    encryptionKey          PublicEncryptionKey OPTIONAL,
    verifyKeyIndicator     VerificationKeyIndicator,
    ...
  }
  (WITH COMPONENTS { ..., appPermissions PRESENT} |
   WITH COMPONENTS { ..., certIssuePermissions PRESENT} |
   WITH COMPONENTS { ..., certRequestPermissions PRESENT})



ObeEcaEnrollmentCertificateRequest ::= CommonEnrollmentCertificateRequest
EcaObeEnrollmentCertificateResponse ::= CommonEnrollmentCertificateResponse

RseEcaEnrollmentCertificateRequest ::= CommonEnrollmentCertificateRequest
EcaRseEnrollmentCertificateResponse ::= CommonEnrollmentCertificateResponse

END
