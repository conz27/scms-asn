
Ieee1609Dot2MaRaInterface
{iso(1) identified-organization(3) ieee(111) 
standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
scms(2) interfaces(1) ma-ra(14) major-version-2(2)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN 

EXPORTS ALL;
 
IMPORTS 
  HashedId8,
  HashedId10,
  Hostname,
  Opaque, 
  Uint8,
  Uint32
FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    base(1) base-types(2) major-version-2(2)}

  Countersignature,
  SignerIdentifier
FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    base(1) schema(1) major-version-2(2)}

  HPCR,
  HPCRAndHostInfo,
  LCIAndHostInfo,
  RaHostnameId,
  MaHostnameId,
  RIF
FROM Ieee1609dot2ScmsBaseTypes {iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    scms(2) interfaces(1) base-types(2) major-version-2(2)}

  ScopedMaRaBlacklistError,
  ScopedMaRaLCIError
FROM Ieee1609dot2ScmsError {iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    scms(2) errors(2) complete(1) major-version-2(2)}
;


--
-- All message types for the MA-RA interface PDU
--
MaRaInterfacePDU ::= CHOICE {
    maRaBlacklistRequest   MaRaBlacklistRequestMsg,
    raMaBlacklistResponse  RaMaBlacklistResponseMsg,
    maRaLCIRequest         MaRaLCIRequestMsg,
    raMaLCIResponse        RaMaLCIResponseMsg,
    maRaRseObeIdBlacklistRequest    MaRaRseObeIdBlacklistRequestMsg,
    raMaRseObeIdBlacklistResponse   RaMaRseObeIdBlacklistResponseMsg,
    maRaCDVRequest          MaRaCDVRequestMsg,
    raMaCDVResponse         RaMaCDVResponseMsg,
    ...
}

--
-- Request to blacklist sent by MA to RA
-- Note that this is actually signed by the MA at the scms-protocol level.
-- The countersignatures are generated by Auditors.
--
MaRaBlacklistRequestMsg ::= SEQUENCE {
    version    Uint8(1),
    tbs        ToBeSignedBlacklistingInstructionMsg,
    -- Size 0 is used when no countersignatures are necessary
    signatures SEQUENCE SIZE (0..MAX) OF Countersignature
}

ToBeSignedBlacklistingInstructionMsg ::= SEQUENCE {
    maId       MaHostnameId,
    hpcr	     SEQUENCE OF HPCR,
    ...
}


--
-- Response to blacklist request sent by RA to MA
--
RaMaBlacklistResponseMsg ::= SEQUENCE {
    version          Uint8(1),
    requestHash      HashedId8,  -- hash of the original request
    raId             RaHostnameId,
    status           SEQUENCE OF BlacklistingStatus,
    ...
}

BlacklistingStatus ::= SEQUENCE {
  	hpcr	  HPCR,
    reply   CHOICE {
      success  NULL,
      failure  ScopedMaRaBlacklistError
    }
}
	
--
-- Request for linkage chain identifiers sent by MA to RA
-- Note that this is actually signed by the MA at the scms-protocol level.
-- The countersignatures are generated by Auditors.
--
MaRaLCIRequestMsg ::= SEQUENCE {
    version    Uint8(1),
    tbs        ToBeSignedLCIRequestMsg,
    -- Size 0 is used when no countersignatures are necessary
    signatures SEQUENCE SIZE (0..MAX) OF Countersignature
}

ToBeSignedLCIRequestMsg ::= SEQUENCE {
    maId       MaHostnameId,
    hpcr       SEQUENCE OF HPCR,
    ...
}

--
-- Response to request for linkage chain identifiers sent by RA to MA
--
RaMaLCIResponseMsg ::= SEQUENCE {
    version          Uint8(1),
    requestHash      HashedId8,  -- hash of the original request
    raId             RaHostnameId,
    lciInfo          SEQUENCE OF HPCR2LCI,
    ...
}

HPCR2LCI ::= SEQUENCE {
  	hpcr		HPCR,
    reply   CHOICE {
      success   SEQUENCE {
        groupIdentifier OCTET STRING (SIZE(4)),
        info            LCIAndHostInfo
      },
      failure   ScopedMaRaLCIError
    }
}

--
-- The following messages use a Revocation Identifer (RIF) instead of the
-- HPCR to identify what is being revoked.  
--

-- The RIF data type is defined as an 8-byte arry in scms-base-types.asn

--
-- Request to blacklist sent by MA to RA
-- Note that this is actually signed by the MA at the scms-protocol level.
-- The countersignatures are generated by Auditors.
--
MaRaRseObeIdBlacklistRequestMsg ::= SEQUENCE {
    version    Uint8(1),
    tbs        ToBeSignedRseObeIdBlacklistingInstructionMsg,
    -- Size 0 is used when no countersignatures are necessary
    signatures SEQUENCE SIZE (0..MAX) OF Countersignature
}

ToBeSignedRseObeIdBlacklistingInstructionMsg ::= SEQUENCE {
    maId        MaHostnameId,
    rif	        SEQUENCE OF RIF,
    ...
}

--
-- Response to blacklist request sent by RA to MA
--
RaMaRseObeIdBlacklistResponseMsg ::= SEQUENCE {
    version          Uint8(1),
    requestHash      HashedId8,  -- hash of the original request
    raId             RaHostnameId,
    status           SEQUENCE OF RseObeIdBlacklistingStatus,
    ...
}

RseObeIdBlacklistingStatus ::= SEQUENCE {
    rif     RIF,
    reply   CHOICE {
      success  NULL,
      failure  ScopedMaRaBlacklistError
    }
}


--
-- MA-to-RA: Request for certificate digest values (CDV) sent by MA to RA
-- Note that this is actually signed by the MA at the scms-protocol level.
-- The countersignatures are generated by Auditors.
--
MaRaCDVRequestMsg ::= SEQUENCE {
    version    Uint8(1),
    tbs        ToBeSignedCDVRequestMsg,
    -- Size 0 is used when no countersignatures are necessary
    signatures SEQUENCE SIZE (0..MAX) OF Countersignature
}

ToBeSignedCDVRequestMsg ::= SEQUENCE {
    maId       MaHostnameId,
    rifValues  SEQUENCE OF RIF,
    ...
}


--
-- RA-to-MA: replies with list of certificate digest values (CDV)
--

RaMaCDVResponseMsg ::= SEQUENCE {
    version         Uint8(1),
    requestHash     HashedId8,  -- hash of the original request
    raId            RaHostnameId,
    cdvInfo         SEQUENCE OF CdvInfo
}

CdvInfo ::= SEQUENCE {  
	rif        RIF,
	reply CHOICE {			
        -- for each input rif, a list of certificate digests (HashedId8) is returned
        success  SEQUENCE OF HashedId10,
        failure  ScopedMaRaBlacklistError
	}
}


END

