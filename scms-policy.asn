Ieee1609dot2ScmsPolicyTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
scms (2) interfaces(1) policy-types (500)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS

    Countersignature,
    ExplicitCertificate,
    Ieee1609Dot2Data,
    SequenceOfCertificate

FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) base (1) schema (1)}

    Duration,
    Hostname,
    Opaque,
    Time64,
    Uint8,
    Uint16,
    Uint32,
    Uint64

FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) base(1) base-types(2)}

    LaHostnameId,
    PcaHostnameId,
    RaHostnameId

FROM Ieee1609dot2ScmsBaseTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
scms (2) interfaces(1) base-types (2)}

;

----
--
-- Global & Local Policy:
--
-- Each resides in its own file and its signed by one or more components
-- to ensure the policy is valid.
--
----

PolicyFiles ::= CHOICE {
    globalPolicyFile GlobalPolicyFile,
    localPolicyFile LocalPolicyFile,
    ...
}

BasePolicyFile ::= SEQUENCE {
    version Uint8(1),
    tbsData ToBeSignedPolicyData,
    -- countersignatures generated by auditors of the policy file
    signatures SEQUENCE SIZE(1..MAX) OF Countersignature,
    ...
}

ToBeSignedPolicyData ::= SEQUENCE {
    policyID OCTET STRING (SIZE (0..32)),
    generationTime Time64,
    activeTime Time64,
    policy Policy,
    ...
}

GlobalPolicyFile ::= BasePolicyFile (WITH COMPONENTS {...,
    tbsData( WITH COMPONENTS {...,
        policy(WITH COMPONENTS {...,
            global PRESENT
        })
    })
})


LocalPolicyFile ::= SEQUENCE {
    globalParameters BasePolicyFile (WITH COMPONENTS {...,
        tbsData( WITH COMPONENTS {...,
            policy( WITH COMPONENTS {...,
                custom PRESENT
            })
        })
    }),

    localParamters BasePolicyFile (WITH COMPONENTS {...,
        tbsData( WITH COMPONENTS {...,
            policy( WITH COMPONENTS {...,
                local PRESENT
            })
        })
    })
}


Policy ::= CHOICE {
    global  GlobalPolicyData,
    custom  CustomPolicyData,
    local   LocalPolicyData,
    ...
}


GlobalPolicyData ::= SEQUENCE {
    temporalSeriesOfScmsVersion SEQUENCE {
        initialScmsVersion ScmsVersion DEFAULT 1,           -- SCMS Version 1 is current
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            scmsVersion ScmsVersion
        }
    } OPTIONAL,
    temporalSeriesOfSizeLaOneId SEQUENCE {
        initialSizeofLaOneId SizeLaId,                      -- LA Identifier (2 bytes)
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            sizeOfLaOneId SizeLaId
        }
    } OPTIONAL,
    temporalSeriesOfSizeLaTwoId SEQUENCE {
        initialSizeLaTwoId SizeLaId,                        -- LA Identifier (2 bytes)
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            sizeLaTwoId SizeLaId
        }
    } OPTIONAL,
    temporalSeriesOfOverdueCrlTolerance SEQUENCE {
        initialOverdueCrlTolerance OverdueCrlTolerance,     -- overdue CRL Tolerance (4 bytes)
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            overdueCrlTolerance OverdueCrlTolerance
        }
    } OPTIONAL,
    temporalSeriesOfIPeriod SEQUENCE {
        initialIPeriod IPeriod,                             -- i-value / i-period; default: 1 week
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            iPeriod IPeriod
        }
    } OPTIONAL,
    temporalSeriesOfMinCertsPerIPeriod SEQUENCE {
        initialMinCertsPerIPeriod MinCertsPerIPeriod DEFAULT 20,    -- minimum certs per i-period; default: 20
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            minCertsPerIPeriod MinCertsPerIPeriod
        }
    } OPTIONAL,
    temporalSeriesOfCertValidityModel SEQUENCE {
        initialCertValidityModel CertValidityModel,         -- maximum cert validity period; default 3 years
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            certValidityModel CertValidityModel
        }
    } OPTIONAL,
    temporalSeriesOfMaxDurationPerSuperBatch SEQUENCE {
        initialMaxDurationPerSuperBatch MaxDurationPerSuperBatch,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            maxDurationPerSuperBatch MaxDurationPerSuperBatch
        }
    } OPTIONAL,
    temporalSeriesOfBytesLinkageSeed SEQUENCE {
        initialBytesLinkageSeed BytesLinkageSeed DEFAULT 16,    -- bytes in linkage seed; default: 16, max: 32
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            bytesLinkageSeed BytesLinkageSeed
        }
    } OPTIONAL,
    temporalSeriesOfBytesLinkageValue SEQUENCE {
        initialBytesLinkageValue BytesLinkageValue DEFAULT 9,   -- bytes in linkage value; default: 9, max: 32
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            bytesLinkageSeed BytesLinkageValue
        }
    } OPTIONAL,
    temporalSeriesOfBytesGroupLinkageSeed SEQUENCE {
        initialBytesGroupLinkageSeed BytesGroupLinkageSeed DEFAULT 16,  -- bytes in group linkage seed; default: 16, max: 32
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            bytesGroupLinkageSeed BytesGroupLinkageSeed
        }
    } OPTIONAL,
    temporalSeriesOfGroupBytesLinkageValue SEQUENCE {
        initialGroupBytesLinkageValue BytesGroupLinkageValue DEFAULT 9, -- bytes in group linkage value; default: 9, max: 32
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            bytesGroupLinkageSeed BytesGroupLinkageValue
        }
    } OPTIONAL,
    temporalSeriesOfMaxGroupSize SEQUENCE {
        initialMaxGroupSize MaxGroupSize,               -- maximum # of EEs per group: [0, 2^32-1]
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            maxGroupSize MaxGroupSize
        }
    } OPTIONAL,
    temporalSeriesOfMaxNumGroups SEQUENCE {
        initialMaxNumGroups MaxNumGroups,               -- maximum # of groups suppported: [0, 2^32-1]
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            maxNumGroups MaxNumGroups
        }
    } OPTIONAL,
    temporalSeriesOfMaxCertRequestAge SEQUENCE {
        initialMaxCertRequestAge MaxCertRequestAge,     -- maximum time for individual cert request; to remain in aggregator; default: 2 days
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            maxCertRequestAge MaxCertRequestAge
        }
    } OPTIONAL,
    temporalSeriesOfShuffleThreshold SEQUENCE {
        initialShuffleThreshold ShuffleThreshold,       -- minimum # of individual cert requests before shuffle/send to PCA
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            shuffleThreshold ShuffleThreshold
        }
    } OPTIONAL,
    temporalSeriesOfHashOfRequestSize SEQUENCE {
        initialHashOfRequestSize HashOfRequestSize DEFAULT 32,   -- bytes in "hash of request" between PCA and RA for inividual
                                                                 -- cert requests; default: 32
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            hashOfRequestSize HashOfRequestSize
        }
    } OPTIONAL,
    ...
}


--
-- CustomPolicyData
--
-- This type is used by an RA that wasnts to creat a custom version of the
-- GlobalPolicyData.  This structure adds an element with the RA's ID to
-- differentiate it from a conventional GlobalPolicyFile.  
-- 
CustomPolicyData ::= SEQUENCE {
    requestingRaHostname RaHostnameId OPTIONAL,	      	    -- Hostname of the RA that customized this policy data

    GlobalPolicyData,
    ...
}


ScmsVersion ::= Uint8                   
SizeLaId ::= Uint16                     
OverdueCrlTolerance ::= Duration        
IPeriod ::= Duration                    
MinCertsPerIPeriod ::= Uint8            
MaxDurationPerSuperBatch ::= Uint8      
BytesLinkageSeed ::= Uint8              
BytesLinkageValue ::= Uint8             
BytesGroupLinkageSeed ::= Uint8         
BytesGroupLinkageValue ::= Uint8        
MaxGroupSize ::= Uint32                 
MaxNumGroups ::= Uint32                 
MaxCertRequestAge ::= Duration          
ShuffleThreshold ::= Uint32             
HashOfRequestSize ::= Uint8            
CertChainFileId ::= Uint16              

LocalPolicyData ::= SEQUENCE {
    temporalSeriesOfShuffleThreshold SEQUENCE {
        initialShuffleThreshold ShuffleThreshold,           -- minimum # of individual cert requests before shuffle/send to PCA
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            shuffleThreshold ShuffleThreshold
        }
    } OPTIONAL,
    temporalSeriesOfCertsPerIPeriod SEQUENCE {
        initialCertsPerIPeriod CertsPerIPeriod DEFAULT 20,  -- certs per i-period (overrides global value); default: 20
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            certsPerIPeriod CertsPerIPeriod
        }
    } OPTIONAL,
    temporalSeriesOfLaOneHost SEQUENCE {
        initialLaOneHost LaHostnameId,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            laOneHost LaHostnameId
        }
    } OPTIONAL,
    temporalSeriesOfLaTwoHost SEQUENCE {
        initialLaTwoHost LaHostnameId,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            laTwoHost LaHostnameId
        }
    } OPTIONAL,
    temporalSeriesOfPcaHost SEQUENCE {
        initialPcaHost PcaHostnameId,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            pcaHost PcaHostnameId
        }
    } OPTIONAL,
    temporalSeriesOfRaX509TlsCert SEQUENCE {
        initialRaX509TlsCert X509TlsCert,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            raX509TlsCert X509TlsCert
        }
    } OPTIONAL,
    temporalSeriesOfLaX509TlsCert SEQUENCE {
        initialLaX509TlsCert X509TlsCert,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            laX509TlsCert X509TlsCert
        }
    } OPTIONAL,
    temporalSeriesOfPcaX509TlsCert SEQUENCE {
        initialRaX509TlsCert X509TlsCert,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            pcaX509TlsCert X509TlsCert
        }
    } OPTIONAL, 
    temporalSeriesOfSharedKeyUpdateInterval SEQUENCE {
        initialSharedKeyUpdateInterval SharedKeyUpdateInterval,     -- maximum time between changes to pre-linkage value enc/dec key
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            sharedKeyUpdateInterval SharedKeyUpdateInterval
        }
    } OPTIONAL,
    ...
}

CertsPerIPeriod ::= Uint8                
X509TlsCert ::= Opaque
SharedKeyUpdateInterval ::= Duration    


CertValidityModel ::= ENUMERATED {
    concurrent      (1),
    non-concurrent  (2),
    ...
}


END
