-------------------------------------------------------------------------------
-- SCMS-POLICY
--
-- The structures in this file define the different policies in SCMS, such as
-- Global and Local Policy files.
--
-- Each resides in its own file and is signed by one or more components
-- to ensure the policy is valid. Policies affect not only EEs, but backend
-- SCMS components as well.
--
-- This file is part of the SCMS protocol developed by CAMP VSC5
-- It depends on the IEEE 1609.2 protocol specification
-------------------------------------------------------------------------------

Ieee1609dot2ScmsPolicyTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
scms (2) interfaces(1) policy-types (500)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS

    Countersignature,
    ExplicitCertificate,
    Ieee1609Dot2Data,
    SequenceOfCertificate

FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) base (1) schema (1)}

    Duration,
    Hostname,
    Opaque,
    Time64,
    Uint8,
    Uint16,
    Uint32,
    Uint64

FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)
dot2(2) base(1) base-types(2)}

    LaHostnameId,
    PcaHostnameId,
    RaHostnameId

FROM Ieee1609dot2ScmsBaseTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
scms (2) interfaces(1) base-types (2)}

;


--------------------------------
-- PolicyFiles 
--
-- PDU referenced in scms-protocols.asn.
--------------------------------
PolicyFiles ::= CHOICE {
    globalPolicyFile GlobalPolicyFile,
    localPolicyFile LocalPolicyFile,
    ...
}

--------------------------------
-- GlobalPolicyFile 
--
-- Global Policy File (GPF) Structure: this file is generated and signed by the 
-- Policy Generator and encapsulated within a SignedGlobalPolicyFile structure 
-- in scms-protocols.asn. The policy type is: global.
--------------------------------
GlobalPolicyFile ::= BasePolicyFile (WITH COMPONENTS {...,
    tbsData( WITH COMPONENTS {...,
        policy(WITH COMPONENTS {...,
            global PRESENT
        })
    })
})

--------------------------------
-- LocalPolicyFile 
--
-- Local Policy File (LPF) Structure: this file is generated and signed by the 
-- RA and encapsulated within the SignedLocalPolicyFile in scms-protocols.asn. 
-- The global policy type is: custom and a localParameters section follows with 
-- a policy type: local that contains policies set by the RA.
--
-- Because the RA is allowed to remove fields from the GPF which are not
-- relevant to the OBUs and/or RSUs under its jurisdiction, it must request
-- that Policy Generator signs the 'custom' portion. This ensures the customized
-- GPF is consistent with the actual GPF. The signature of the PG will appear in
-- the 'signatures' field of the 'globalParameters'.
--
-- The 'localParameters' section of the policy is signed by the RA, and its
-- signature should appear in the 'signatures' section as well as any other
-- auditors of the LPF.
--
-- The LocalPolicyFile is encapsulated by the SignedLocalPolicyFile defined
-- in scms-protocol.asn, which is signed by the RA.
--------------------------------
LocalPolicyFile ::= SEQUENCE {
    globalParameters BasePolicyFile (WITH COMPONENTS {...,
        tbsData( WITH COMPONENTS {...,
            policy( WITH COMPONENTS {...,
                custom PRESENT
            })
        })
    }),

    localParamters BasePolicyFile (WITH COMPONENTS {...,
        tbsData( WITH COMPONENTS {...,
            policy( WITH COMPONENTS {...,
                local PRESENT
            })
        })
    })
}


--------------------------------
-- BasePolicyFile 
-- 
-- This file describes a base structure for Policy Files
--
-- version      protocol version of the BasePolicyFile structure
-- tbsData      data used in generating the signature
-- signatures   a list of signatures based on the the 'tbsData'; adding a
--              signature is a form validation for the data that is signed.
--------------------------------
BasePolicyFile ::= SEQUENCE {
    version Uint8(1),
    tbsData ToBeSignedPolicyData,
    -- countersignatures generated by auditors of the policy file
    signatures SEQUENCE SIZE(1..MAX) OF Countersignature,
    ...
}


--------------------------------
-- ToBeSignedPolicyData 
-- 
-- Structure containing the Policy Data attributes to be signed
--
-- policyID             a unique identifier for the policy
-- generationTime       a timestamp of when the policy was generated
-- activeTime           a future timestamp when the policy is to take effect
-- policy               type of policy; one of {global, custom, local}.
--------------------------------
ToBeSignedPolicyData ::= SEQUENCE {
    policyID OCTET STRING (SIZE (0..32)),
    generationTime Time64,
    activeTime Time64,
    policy Policy,
    ...
}


--------------------------------
-- Policy 
--
-- The possible types of the policy 
--
-- global   set and signed by Policy Generator
-- custom   set by RA and signed by Policy Generator
-- local    set by RA and signed at minimum by RA (and other auditors)
--------------------------------
Policy ::= CHOICE {
    global  GlobalPolicyData,
    custom  CustomPolicyData,
    local   LocalPolicyData,
    ...
}


--------------------------------
-- GlobalPolicyData 
--
-- This structure defines the parameters of the Global Policy 
--
-- This structure contains an array of temporal series, where each temporal
-- serie applies to a particular parameter of the policy. The syntax of these
-- temporal series follows the following format:
--
-- temporalSeriesOfXXX {
--      initialXXX XXX
--      intervals SEQUENCE SIZE(0..N) OF SEQUENCE {
--          startTime Time64
--          xxx XXX
--      }
-- }
-- 
-- where:
--
--      initialXXX      initial value of parameter of type XXX
--      startTime       timestamp in future when value takes effect
--      xxx             value of parameter
--      XXX             type of parameter
-- 
--------------------------------
GlobalPolicyData ::= SEQUENCE {
    -- SCMS Version
    temporalSeriesOfScmsVersion SEQUENCE {
        initialScmsVersion ScmsVersion DEFAULT 1,
        -- SCMS Version, default value is 1
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            scmsVersion ScmsVersion
        }
    } OPTIONAL,

    -- GCCF file ID
    temporalSeriesOfCertChainFileID SEQUENCE {
        initialGlobalCertChainFileID GlobalCertChainFileID,
        -- File ID number of the current GCCF
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            globalCertChainFileID GlobalCertChainFileID
        }
    } OPTIONAL,

    -- Overdure CRL Tolerance
    temporalSeriesOfOverdueCrlTolerance SEQUENCE {
        initialOverdueCrlTolerance OverdueCrlTolerance,
        -- max time to operate without a new CRL, specified in weeks (4 bytes)
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            overdueCrlTolerance OverdueCrlTolerance
        }
    } OPTIONAL,

    -- i-period 
    temporalSeriesOfIPeriod SEQUENCE {
        initialIPeriod IPeriod,
        -- i-value / i-period; default: 1 week
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            iPeriod IPeriod
        }
    } OPTIONAL,

    -- Min certs per i-period
    temporalSeriesOfMinCertsPerIPeriod SEQUENCE {
        initialMinCertsPerIPeriod MinCertsPerIPeriod DEFAULT 20,
        -- minimum certs per i-period; default: 20
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            minCertsPerIPeriod MinCertsPerIPeriod
        }
    } OPTIONAL,

    -- Cert Validity Model
    temporalSeriesOfCertValidityModel SEQUENCE {
        initialCertValidityModel CertValidityModel,
         -- pseudonym cert validity model - "concurrent" or "non-concurrent"
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            certValidityModel CertValidityModel
        }
    } OPTIONAL,

    -- Max available cert supply
    temporalSeriesOfMaxAvailableCertSupply SEQUENCE {
        initialMaxAvailableCertSupply MaxAvailableCertSupply,
        -- max time covered by a certificate batch in years, default: 3 years
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            maxAvailableCertSupply MaxAvailableCertSupply
        }
    } OPTIONAL,

    -- Max cert request age
    temporalSeriesOfMaxCertRequestAge SEQUENCE {
        initialMaxCertRequestAge MaxCertRequestAge,
        -- maximum time for individual cert request; to remain in aggregator;
        -- default: 2 days
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            maxCertRequestAge MaxCertRequestAge
        }
    } OPTIONAL,

    -- Shuffle threshold
    temporalSeriesOfShuffleThreshold SEQUENCE {
        initialShuffleThreshold ShuffleThreshold DEFAULT 1000,
        -- minimum # of individual cert requests before shuffle/send to PCA
	-- default: 1000
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            shuffleThreshold ShuffleThreshold
        }
    } OPTIONAL,

    -- Hash of request size
    temporalSeriesOfHashOfRequestSize SEQUENCE {
        initialHashOfRequestSize HashOfRequestSize DEFAULT 32,
        -- bytes in "hash of request" between PCA and RA for inividual
	-- cert requests; default: 32
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            hashOfRequestSize HashOfRequestSize
        }
    } OPTIONAL,

    -- Max GPF GCCF retrieval interval
    temporalSeriesOfMaxGpfGccfRetrievalInterval SEQUENCE {
        initialMaxGpfGccfRetrievalInterval MaxGpfGccfRetrievalInterval,
        -- maximum interval (in hours) before retreiving new GPF or GCCF
	-- default: 1 hour
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
	    startTime Time64,
	    maxGpfGccfRetrievalInterval MaxGpfGccfRetrievalInterval
        }
    } OPTIONAL,

    -- RSE application cert validity 
    temporalSeriesOfRseApplicationCertValidity SEQUENCE {
        initialRseApplicationCertValidity RseApplicationCertValidity,
	-- validity time for an RSE cert (in hours)
	-- Default value is 1 week + 1 hour = 168 hours
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            rseApplicationCertValidity RseApplicationCertValidity
        }
    } OPTIONAL,

    -- RSE application cert overlap
    temporalSeriesOfRseApplicationCertOVerlap SEQUENCE {
    initialRseApplicationCertOverlap RseApplicationCertOverlap,
        -- Default value is 1 hour
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            rseApplicationCertOverlap RseApplicationCertOverlap
	}
    } OPTIONAL,	

    ...
}


--------------------------------
-- CertValidityModel 
--
-- The model of validity for the certificates in SCMS
--
-- concurrent       certificates for i-period are all simultaneous valid.
-- non-concurrent   certificates for i-period are sequentially valid.
--
-- Note: 'concurrent' is the default for best overall security.
--------------------------------
CertValidityModel ::= ENUMERATED {
    concurrent      (1),
    non-concurrent  (2),
    ...
}

ScmsVersion ::= Uint8                   
GlobalCertChainFileID ::= Uint16
OverdueCrlTolerance ::= Duration        
IPeriod ::= Duration                    
MinCertsPerIPeriod ::= Uint8            
MaxAvailableCertSupply ::= Duration
MaxCertRequestAge ::= Duration          
ShuffleThreshold ::= Uint32             
HashOfRequestSize ::= Uint8            
MaxGpfGccfRetrievalInterval ::= Duration
RseApplicationCertValidity ::= Duration
RseApplicationCertOverlap ::= Duration


--------------------------------
-- CustomPolicyData 
--
-- This type is used by an RA that wants to create a custom version of the
-- GlobalPolicyData.  This structure adds an element with the RA's ID to
-- differentiate it from a conventional GlobalPolicyFile.
--
-- requestingRaHostname     hostname of the RA requesting the custom change
-- globalPolicy             customized global policy (with 'custom' field
--                          present)
--------------------------------
CustomPolicyData ::= SEQUENCE {
    requestingRaHostname RaHostnameId OPTIONAL,
    -- Hostname of the RA that customized this policy data
    globalPolicy GlobalPolicyData,
    ...
}

--------------------------------
-- LocalPolicyData 
-- 
-- This structure defines the parameters of the Local Policy 
--
-- This structure contains an array of temporal series, where each temporal
-- serie applies to a particular parameter of the policy. The syntax of these
-- temporal series follows the following format:
--
-- temporalSeriesOfXXX {
--      initialXXX XXX
--      intervals SEQUENCE SIZE(0..N) OF SEQUENCE {
--          startTime Time64
--          xxx XXX
--      }
-- }
-- 
-- where:
--
--      initialXXX      initial value of parameter of type XXX
--      startTime       timestamp in future when value takes effect
--      xxx             value of parameter
--      XXX             type of parameter
-- 
--------------------------------
LocalPolicyData ::= SEQUENCE {
    temporalSeriesOfShuffleThreshold SEQUENCE {
        -- minimum # of individual cert requests before shuffle/send to PCA
        initialShuffleThreshold ShuffleThreshold,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            shuffleThreshold ShuffleThreshold
        }
    } OPTIONAL,
    temporalSeriesOfCertsPerIPeriod SEQUENCE {
        -- certs per i-period (overrides global value); default: 20
        initialCertsPerIPeriod CertsPerIPeriod DEFAULT 20,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            certsPerIPeriod CertsPerIPeriod
        }
    } OPTIONAL,
    temporalSeriesOfLaOneHost SEQUENCE {
        -- hostname of LA #1
        initialLaOneHost LaHostnameId,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            laOneHost LaHostnameId
        }
    } OPTIONAL,
    temporalSeriesOfLaTwoHost SEQUENCE {
        -- hostname of LA #2
        initialLaTwoHost LaHostnameId,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            laTwoHost LaHostnameId
        }
    } OPTIONAL,
    temporalSeriesOfPcaHost SEQUENCE {
        -- hostname of PCA
        initialPcaHost PcaHostnameId,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            pcaHost PcaHostnameId
        }
    } OPTIONAL,
    temporalSeriesOfRaX509TlsCert SEQUENCE {
        -- X.509 Certifcate of the RA (bytes)
        initialRaX509TlsCert X509TlsCert,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            raX509TlsCert X509TlsCert
        }
    } OPTIONAL,
    temporalSeriesOfLaX509TlsCert SEQUENCE {
        -- X.509 Certificate of LA (bytes)
        initialLaX509TlsCert X509TlsCert,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            laX509TlsCert X509TlsCert
        }
    } OPTIONAL,
    temporalSeriesOfPcaX509TlsCert SEQUENCE {
        -- X.509 Certificate of PCA (bytes)
        initialPcaX509TlsCert X509TlsCert,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            pcaX509TlsCert X509TlsCert
        }
    } OPTIONAL, 
    temporalSeriesOfSharedKeyUpdateInterval SEQUENCE {
        -- maximum time between changes to pre-linkage value enc/dec key
        initialSharedKeyUpdateInterval SharedKeyUpdateInterval,
        intervals SEQUENCE SIZE(0..MAX) OF SEQUENCE {
            startTime Time64,
            sharedKeyUpdateInterval SharedKeyUpdateInterval
        }
    } OPTIONAL,
    ...
}

CertsPerIPeriod ::= Uint8                
X509TlsCert ::= Opaque
SharedKeyUpdateInterval ::= Duration    


END
