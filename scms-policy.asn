Ieee1609dot2ScmsPolicyTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
scms (2) interfaces(1) policy-types (500)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
    
    Countersignature,
    ExplicitCertificate,
    Ieee1609Dot2Data,
    SequenceOfCertificate

FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111) 
standards-association-numbered-series-standards(2) wave-stds(1609)  
dot2(2) base (1) schema (1)}

    Duration,
    Hostname,
    Opaque,
    Time64,
    Uint8,
    Uint16,
    Uint32
   
FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111) 
standards-association-numbered-series-standards(2) wave-stds(1609)  
dot2(2) base(1) base-types(2)}

    LaHostnameId,
    PcaHostnameId,
    RaHostnameId

FROM Ieee1609dot2ScmsBaseTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
scms (2) interfaces(1) base-types (2)}

;

----
--
-- Global & Local Policy:
--
-- Each resides in its own file and its signed by one or more components
-- to ensure the policy is valid.
--
----

BasePolicyFile ::= SEQUENCE {
    version Uint8(1),
    tbsData ToBeSignedPolicyData,
    -- countersignatures generated by auditors of the policy file    
    signatures SEQUENCE SIZE(1..MAX) OF Countersignature,
    ...
}

ToBeSignedPolicyData ::= SEQUENCE {
    policyID OCTET STRING (SIZE (0..32)),
    generationTime Time64,
    activeTime Time64,
    policy Policy,
    ...
}

GlobalPolicyFile ::= BasePolicyFile (WITH COMPONENTS {...,
    tbsData( WITH COMPONENTS {...,
        policy(WITH COMPONENTS {...,
            global PRESENT
        })
    })
})

SignedGlobalPolicyFile ::= Ieee1609Dot2Data( WITH COMPONENTS{...,
    content( WITH COMPONENTS{...,
      signedData( WITH COMPONENTS{...,
        tbsData( WITH COMPONENTS{...,
          payload( WITH COMPONENTS{...,
            data( WITH COMPONENTS{...,
              content( WITH COMPONENTS{...,
                unsecuredData( CONTAINING GlobalPolicyFile)
              })
            })
          })
        })
      })
   })
})

LocalPolicyFile ::= BasePolicyFile (WITH COMPONENTS {...,
    tbsData( WITH COMPONENTS {...,
        policy( WITH COMPONENTS {...,
            local PRESENT
        })
    })
})

SignedLocalPolicyFile ::= Ieee1609Dot2Data( WITH COMPONENTS{...,
    content( WITH COMPONENTS{...,
      signedData( WITH COMPONENTS{...,
        tbsData( WITH COMPONENTS{...,
          payload( WITH COMPONENTS{...,
            data( WITH COMPONENTS{...,
              content( WITH COMPONENTS{...,
                unsecuredData( CONTAINING LocalPolicyFile)
              })
            })
          })
        })
      })
   })
})

Policy ::= CHOICE {
    global  GlobalPolicyData,
    local   LocalPolicyData,
    ...
}
GlobalPolicyData ::= SEQUENCE {
    scmsVersion Uint8 DEFAULT 1,                                -- SCMS Version 1 is current
    sizeLaOneId Uint16 OPTIONAL,                                -- LA 1 Identifier (2 bytes)
    sizeLaTwoId Uint16 OPTIONAL,                                -- LA 2 Identifier (2 bytes)
    overdueCrlTolerance Duration OPTIONAL,                      -- Overdue CRL Tolerance (4 bytes)
    iPeriod Duration OPTIONAL,                                  -- i-value / i-period ; default: 1 week
    minCertsPerIPeriod Uint8 DEFAULT 20,                        -- minimum certs per i-period; default: 20 certs
    certValidityModel ValidityModel OPTIONAL,                   -- certificate validity model (concurrent or non-concurent)
    maxDurationPerSuperBatch Duration OPTIONAL,                 -- maximum cert validity time period ; default: 3 years
    bytesLinkageSeed Uint8 DEFAULT 16,                          -- bytes in linkage seed; default 16 max: 32
    bytesLinkageValue Uint8 DEFAULT 9,                          -- bytes in linkage value; default: 9 max: 32
    bytesGroupLinkageSeed Uint8 DEFAULT 16,                     -- bytes in group linkage value; default: 16 max: 32
    bytesGroupLinkageValue Uint8 DEFAULT 9,                     -- bytes in group linkage value; default: 9 max: 32
    maxGroupSize Uint32 OPTIONAL,                               -- maximum number of EEs per group; range: 0 to 2^32-1
    maxCertRequestAge Duration OPTIONAL,                        -- maximum time for Individual Cert Request to remain in aggregator; default: 2 days
    shuffleThreshold Uint32 OPTIONAL,                           -- minimum number of Individual Cert Request before shuffle/send to PCA
    hashOfRequestSize Uint8 DEFAULT 32,                         -- bytes in "hash of request" between PCA & RA for individual cert requests; default: 32
    certChainFileId Uint16 OPTIONAL,                            -- must match version in GlobalCertificateChainFile
    ...
}

LocalPolicyData ::= SEQUENCE {
    shuffleThreshold Uint32 OPTIONAL,                           -- minimum number of Individual Cert Request before shuffle/send to PCA
    minCertsPerIPeriod Uint8 DEFAULT 20,                        -- minimum certs per i-period; default: 20 certs
    laOneHost LaHostnameId OPTIONAL,
    laTwoHost LaHostnameId OPTIONAL,
    pcaHost PcaHostnameId OPTIONAL,
    raHost RaHostnameId OPTIONAL,
    x509TlsCert Opaque OPTIONAL,                           		-- TODO: verify that this is suitable for representing a X509 certificate
    sharedKeyUpdateInterval Duration OPTIONAL,                  -- maximum time between changes to pre-linkage value enc/dec key
    ...
}

ValidityModel ::= ENUMERATED {
    concurrent      (1),
    non-concurrent  (2),
    ...   
} 

----
--
-- Global Certificate Chain File:
--
-- Contains the full certificate chains of each valid Root, ICA, or PCA that has been issued a
-- certificate. This file is signed by the Policy Generator.
--
----

GlobalCertificateChainFile ::= SEQUENCE {
    version Uint16(0), -- version must match certChainFileId in Global Policy
    tbsData ToBeSignedCertificateChainFileData,
    -- the countersignatures are generated by auditors of the file
    signatures SEQUENCE SIZE(1..MAX) OF Countersignature,
    ...
}

ToBeSignedCertificateChainFileData ::= SEQUENCE {
    rootMgmtCmds ManagementCommands OPTIONAL,
    certStore CertificateStore,
    ...
}

SignedGlobeCertificateChainFile ::= Ieee1609Dot2Data( WITH COMPONENTS{...,
    content( WITH COMPONENTS{...,
      signedData( WITH COMPONENTS{...,
        tbsData( WITH COMPONENTS{...,
          payload( WITH COMPONENTS{...,
            data( WITH COMPONENTS{...,
              content( WITH COMPONENTS{...,
                unsecuredData( CONTAINING GlobalCertificateChainFile )
              })
            })
          })
        })
      })
   })
})

ManagementCommands ::= SEQUENCE OF ManagementCommand

CertificateStore ::= SEQUENCE {
    rootCAs RootCerts,
    icaCertChains IcaCertChains,
    ecaCertChains EcaCertChains,
    pcaCertChains PcaCertChains,
    ...
}

--
-- Backend Management Commands
--

ManagementCommandType ::= ENUMERATED {
    addRootCA       (1),
    revokeRootCA    (2),
    ...
}

ManagementContext ::= CHOICE {
    rootInfo RootInfo,
    ...
}

ManagementCommand ::= SEQUENCE {
    command ManagementCommandType,
    context ManagementContext OPTIONAL,
    generationTime Time64,
    activeTime Time64,
    -- the countersignatures are generated by auditors of the ManagementCommand
    signatures SEQUENCE SIZE(1..MAX) OF Countersignature,
    ...
}

RootInfo ::= SEQUENCE {
    certificate ExplicitCertificate,
    ...
}

CommandAddRootCA ::= ManagementCommand (WITH COMPONENTS {...,
    command(addRootCA),
    context(WITH COMPONENTS{rootInfo})
})

CommandRevokeRootCA ::= ManagementCommand (WITH COMPONENTS {...,
    command(revokeRootCA),
    context(WITH COMPONENTS{rootInfo})
})

--
-- Certificate Store
--

-- Each certificate in the sequence is a Root CA.
RootCerts ::= SEQUENCE OF ExplicitCertificate

CertificateChain ::= SEQUENCE OF ExplicitCertificate

-- The first certificate in the sequence is the ICA certificate. The last certificate
-- in the sequence will be the Root certificate. 0 or more ICAs can be listed in
-- order between the first and last certificate of the sequence.
IcaCertChains ::= SEQUENCE OF CertificateChain

-- The first certificate in the sequence is the ECA certificate. The last certificate
-- in the sequence will be the Root certificate. One or more ICAs should be listed in
-- order between the first and last certifcates of the sequence.
EcaCertChains ::= SEQUENCE OF CertificateChain

-- The first certificate in the sequence is the PCA certificate. The last certificate
-- in the sequence will be the Root certificate. One or more ICAs should be listed in
-- order between the first and last certifcates of the sequence.
PcaCertChains ::= SEQUENCE OF CertificateChain

END
