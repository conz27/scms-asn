
Ieee1609Dot2EndEntityRaInterface
{iso(1) identified-organization(3) ieee(111) 
standards-association-numbered-series-standards(2) wave-stds(1609)  
dot2(2) scms(2) interfaces(1) ee-ra(8)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  EccP256CurvePoint,
  EncryptionKey,
  HashAlgorithm,
  Hostname,
  Signature,
  HashedId8,
  Time32,
  Time64,
  Uint8,
  Uint16,
  Uint32
FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    base(1) base-types(2)}

  Certificate,
  ExplicitCertificate,
  Ieee1609Dot2Data,
  ImplicitCertificate,
  SignerIdentifier
FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    base(1) schema(1)}

  ScopedObeError,
  ScopedRaSoftError,
  ScopedRaHardError
FROM Ieee1609dot2ScmsError {iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    scms (2) errors(2) complete(1)}

  SecurityMgmtPsid
FROM Ieee1609dot2ScmsBaseTypes {iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
    scms (2) interfaces(1) base-types (2)}

  SecuredCrl
FROM IEEE1609dot2Crl {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    crl(3) protocol(2)}

;


EndEntityRaInterfacePDU::= CHOICE {
    eeRaCertRequest                      EeRaCertRequestMsg,
    raEeCertResponse                     RaEeCertResponseMsg,
    eeRaPseudonymCertProvisioningRequest 
                          EeRaPseudonymCertProvisioningRequestMsg,
    eeRaPseudonymCertProvisioningRequestWithHardware
                          EeRaPseudonymCertProvisioningRequestWithHardwareMsg,
    raEePseudonymCertProvisioningAck     RaEePseudonymCertProvisioningAckMsg,
    eeRaIdCertProvisioningRequest      EeRaIdCertProvisioningRequestMsg,
    eeRaIdCertProvisioningRequestWithHardware
                          EeRaIdCertProvisioningRequestWithHardwareMsg,
    raEeIdCertProvisioningAck          RaEeIdCertProvisioningAckMsg,
    eeRaAuthenticatedDownloadRequest AuthenticatedDownloadRequest,
    ...
}

EeRaCertRequestMsg ::= SEQUENCE {
    version         Uint8(1),
    ...
}

RaEeCertResponseMsg ::= SEQUENCE {
    version         Uint8(1),
  	reply           CHOICE {
        ack           RaEeCertResponseAck,
        nack          RaEeCertResponseNack
    },
    ...
}

RaEeCertResponseAck ::= SEQUENCE {
    raCertificate   Certificate,
    crl             SecuredCrl,
    ...
}

RaEeCertResponseNack ::= SEQUENCE {
    hardError        ScopedRaHardError,
    ...
}


--
-- End Entity Pseudonym certificates
--


-- signed and encrypted before sending, see scms-protocol.asn.
EeRaPseudonymCertProvisioningRequestBase ::= SEQUENCE {
    version                 Uint8(1),
    enrollmentCert          EndEntityEnrollmentPseudonymCertificate,
    sig-butterfly-seed-key  CHOICE {
        unauthenticated         EccP256CurvePoint,
        hw-authenticated        SignedEccNistP256Point
    },
    enc-butterfly-seed-key  CHOICE {
        unauthenticated         EccP256CurvePoint,
        hw-authenticated        SignedEccNistP256Point
    },
    expansionSign           OCTET STRING (SIZE (16)),
    expansionEnc            OCTET STRING (SIZE (16)),
    currenttime             Time32,
    policyID                OCTET STRING (SIZE (0..32)),
    ...
}


EeRaPseudonymCertProvisioningRequestMsg ::= 
    EeRaPseudonymCertProvisioningRequestBase (WITH COMPONENTS {...,
        sig-butterfly-seed-key (WITH COMPONENTS {unauthenticated}),
        enc-butterfly-seed-key (WITH COMPONENTS {unauthenticated})
    })


EeRaPseudonymCertProvisioningRequestWithHardwareMsg ::= 
    EeRaPseudonymCertProvisioningRequestBase (WITH COMPONENTS {...,
        sig-butterfly-seed-key (WITH COMPONENTS {hw-authenticated}),
        enc-butterfly-seed-key (WITH COMPONENTS {hw-authenticated})
    })


SignedEccNistP256Point ::= Ieee1609Dot2Data (WITH COMPONENTS {...,
    content (WITH COMPONENTS {..., 
      signedData  (WITH COMPONENTS {..., 
        tbsData (WITH COMPONENTS {..., 
          payload (WITH COMPONENTS {..., 
            data (WITH COMPONENTS {...,
               content (WITH COMPONENTS {
                  unsecuredData (CONTAINING EccP256CurvePoint)
              })
            })
          }),
          headerInfo (WITH COMPONENTS {..., 
            psid (SecurityMgmtPsid),
            generationTime ABSENT,
            expiryTime ABSENT,
            generationLocation ABSENT,
            p2pcdLearningRequest ABSENT,
            missingCrlIdentifier ABSENT,
            encryptionKey ABSENT
          })
        }),
        signer (WITH COMPONENTS {
          certificate (SIZE(1))
        })
      })
    })
  })



-- enrollment certificate of the end entity, for pseudonym certificate requests
EndEntityEnrollmentPseudonymCertificate ::= ImplicitCertificate (WITH COMPONENTS {...,
      toBeSigned(WITH COMPONENTS {..., 
          certRequestPermissions PRESENT,
          canRequestRollover PRESENT
      })
  })

-- signed and encrypted before sending, see scms-protocol.asn.
RaEePseudonymCertProvisioningAckMsg ::= SEQUENCE {
    version     Uint8(1),
    -- in case when RA can't calculate hash of the original 
    -- request due to hardError, zero value should be returned
    requestHash HashedId8,  -- hash of the original request
    reply       CHOICE {
        ack        PseudonymCertProvisioningAck,
        nack       RARequestNAcknowledge
    },
    ...
}

PseudonymCertProvisioningAck ::= SEQUENCE {
    certDLTime       Time32,
    certDLURL        Hostname,
    softError        ScopedRaSoftError OPTIONAL,
    ...
}


RARequestNAcknowledge ::= SEQUENCE {
    hardError        ScopedRaHardError,
    ...
}


--
-- End Entity Identification certificates
--


-- signed and encrypted before sending, see scms-protocol.asn.
EeRaIdCertProvisioningRequestBase ::= SEQUENCE {
    version                 Uint8(1),
    enrollmentCert          EndEntityEnrollmentIdCertificate,
    sig-butterfly-seed-key  CHOICE {
        unauthenticated         EccP256CurvePoint,
        hw-authenticated        SignedEccNistP256Point
    },
    enc-butterfly-seed-key  CHOICE {
        unauthenticated         EccP256CurvePoint,
        hw-authenticated        SignedEccNistP256Point
    },
    expansionSign           OCTET STRING (SIZE (16)),
    expansionEnc            OCTET STRING (SIZE (16)),
    currenttime             Time32,
    policyID                OCTET STRING (SIZE (0..32)),
    ...
}

EeRaIdCertProvisioningRequestMsg ::= 
    EeRaIdCertProvisioningRequestBase (WITH COMPONENTS {...,
        sig-butterfly-seed-key (WITH COMPONENTS {unauthenticated}),
        enc-butterfly-seed-key (WITH COMPONENTS {unauthenticated})
    })

EeRaIdCertProvisioningRequestWithHardwareMsg ::= 
    EeRaIdCertProvisioningRequestBase (WITH COMPONENTS {...,
        sig-butterfly-seed-key (WITH COMPONENTS {hw-authenticated}),
        enc-butterfly-seed-key (WITH COMPONENTS {hw-authenticated})
    })


-- enrollment certificate of the end entity, for identification certificate requests
EndEntityEnrollmentIdCertificate ::= Certificate (WITH COMPONENTS {...,
      toBeSigned(WITH COMPONENTS {..., 
          certRequestPermissions PRESENT,
          canRequestRollover PRESENT
      })
  })


RaEeIdCertProvisioningAckMsg ::= RaEePseudonymCertProvisioningAckMsg

-- Identification cert:
--
-- Basically the same as pseudonym certificate requests. Identification certificates
-- always use Butterfly keys. They are not shuffled, nor do they include a linkage value. 
-- This differentiation is visible in other interfaces only, in particular RA-PCA.


-- EE Error Log File

EeErrorLogFile ::= SEQUENCE {
    version Uint8(1),                           --version of the log file, starts with 1
    logEntries SEQUENCE OF ErrorLogEntries,
    ...
}

ErrorLogEntries ::= SEQUENCE {
    timeStamp Time64,                           -- each log entry has a time stamp (UTC),
    hashOfRequest HashedId8,                    -- the hash of the corresponding request EE-RA,
    errorCode ScopedObeError,                   -- and one error code per line item
    ...
}

-- Authenticated Downloads

AuthenticatedDownloadRequest ::= SEQUENCE {
    timestamp      Time32,
    filename       UTF8String (SIZE(0..255)),
    ...
}

END
