-------------------------------------------------------------------------------
-- LA-PCA 
--
-- The structures in this file define the protocol for messages between an LA
-- and the PCA for the purpose of key agreement and key refresh in case the key
-- duration is about to expire or is expired
--
-- It is assumed that the key derivation function KDF() is known a-priori by 
-- both the PCA and the LA. Furthermore, we assume that the LA and the PCA 
-- potentially know each other's certificate.
 
--
-- Both of these processes are initiated by the PCA.
--
-- This file is part of the SCMS protocol developed by CAMP VSC5
-- It depends on the IEEE 1609.2 protocol specification
-------------------------------------------------------------------------------

Ieee1609Dot2LaPcaInterface
{iso(1) identified-organization(3) ieee(111) 
standards-association-numbered-series-standards(2) wave-stds(1609)  
dot2(2) scms(2) interfaces(1) la-pca (10)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS 
  HashedId8,
  Signature,
  Time32,
  Uint8,
  Uint32
FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    base(1) base-types(2)}

  Certificate,
  EncryptedData,
  RecipientInfo
FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    base(1) schema(1)}

  ScopedLaPcaError
FROM Ieee1609dot2ScmsError {iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    scms(2) errors(2) complete(1)}

  FullSizeHash,
  LaHostnameId,
  PcaHostnameId
FROM Ieee1609dot2ScmsBaseTypes {iso(1) identified-organization(3) ieee(111)
    standards-association-numbered-series-standards(2) wave-stds(1609) dot2(2)
    scms(2) interfaces(1) base-types(2)}
;


--------------------------------
-- LaPcaInterfacePDU
--
-- All message types for the LA-PCA interface PDU
--------------------------------
LaPcaInterfacePDU::= CHOICE {
  pcaLaKeyAgreementRequest    PcaLaKeyAgreementRequestMsg,
  laPcaKeyAgreementResponse   LaPcaKeyAgreementResponseMsg,
  pcaLaKeyAgreementAck        PcaLaKeyAgreementAckMsg,
  ...
}


--------------------------------
-- PcaLaKeyAgreementRequestMsg 
--
-- Request to initiate the key agreement sent by the PCA to the LA
--
-- version            version of this request structure
-- pcaId              hostname of the PCA
-- pcaCertificate     certificate of the PCA in case the LA doesn't possess it 
-- enc-R-pca          encrypted PCA's random contribution, with the following 
--                    fields 
--   recipient          the LA's certificate digest info (RecipientInfo has type
--                      of PKRecipientInfo, which contains the ID of the LA's 
--                      certificate and encrypted by ECIES symmetric key 
--                      Enc(AES_key))
--   ciphertext         the PCA's encrypted 32-byte contribution R_pca of type 
--                      PcaRandomContribution. (the random contribution is 
--                      encrypted by AES_key from RecipientInfo)
-- startDate          start date of validity of the agreed symmetric session 
--                    key
-- endDate            end date of validity of the agreed symmetric session key
--------------------------------
PcaLaKeyAgreementRequestMsg ::= SEQUENCE {
  version        Uint8(1),
  pcaId          PcaHostnameId,
  pcaCertificate Certificate OPTIONAL, -- optional, when the LA already has the 
                                       -- PCA's certificate
  enc-R-pca      EncryptedData (WITH COMPONENTS {
    recipients (SIZE (1) INTERSECTION (WITH COMPONENT (
        RecipientInfo (WITH COMPONENTS {
            certRecipInfo              -- using hash of the LA certificate
    })))),
    ciphertext                         -- when decrypted it contains 
                                       -- PcaRandomContribution, R_pca
  }),
  startDate      Time32,
  endDate        Time32
}


--------------------------------
-- PcaRandomContribution 
--
-- The random contribution sent by the PCA for the key derivation
--------------------------------
PcaRandomContribution ::= OCTET STRING (SIZE(32))


--------------------------------
-- LaPcaKeyAgreementResponseMsg 
--
-- Response sent by the LA to the PCA to the key agreement request 
--
-- version            version of this response structure
-- requestHash        hash of the original request
-- laId               hostname of the LA
-- enc-R-la           encrypted random contribution from the LA, with the 
--                    following fields 
--   recipient          the PCA's certificate digest info (RecipientInfo has 
--                      type of PKRecipientInfo, which contains ID of the PCA's
--                      certificate and encrypted by ECIES symmetric key 
--                      Enc(AES_key))
--   ciphertext         the LA's encrypted 32-byte contribution R_la of type 
--                      LaRandomContribution. (the random contribution is 
--                      encrypted by AES_key from RecipientInfo)
-- reply              structure containing (in case of)
--                    a) success: the acknowledgement MAC calculated by the LA
--                    b) failure: the corresponding error
--------------------------------
LaPcaKeyAgreementResponseMsg ::= SEQUENCE {
  version       Uint8(1),
  requestHash   HashedId8,  -- hash of the original request
  laId          LaHostnameId,
  enc-R-la      EncryptedData (WITH COMPONENTS {
    recipients (SIZE (1) INTERSECTION (WITH COMPONENT (
        RecipientInfo (WITH COMPONENTS {
            certRecipInfo   -- using hash of the PCA certificate
    })))),
    ciphertext              -- when decrypted it contains LaRandomContribution,
                            -- R_la
  }),
  reply         CHOICE {
      success FullSizeHash, -- MAC_la computed as 
                            --   HMAC(mac_key, R_pca || R_la || "scms-la")
                            -- where (enc_key, mac_key) = 
                            --   KDF(R_pca || R_la || "scms-la-pca")
                            -- enc_key is the negotiated symmetric key to be 
                            -- used by the LA for PLV encryption
      failure ScopedLaPcaError
  } 
}


--------------------------------
-- LaRandomContribution 
--
-- The random contribution sent by the LA for the key derivation
--------------------------------
LaRandomContribution ::= OCTET STRING (SIZE(32))



--------------------------------
-- PcaLaKeyAgreementAckMsg 
-- 
-- Key agreement acknowledgement sent by PCA to LA
--
-- version            version of this acknowledgement structure
-- requestHash        hash of the original request
-- pcaId              hostname of the PCA
-- reply              structure containing (in case of)
--                    a) success: the acknowledgement MAC calculated by the PCA
--                    b) failure: the corresponding error
--------------------------------
PcaLaKeyAgreementAckMsg ::= SEQUENCE {
  version       Uint8(1),
  requestHash   HashedId8,  -- hash of the initial request
  pcaId         PcaHostnameId,
  reply         CHOICE {
      success FullSizeHash, -- MAC_pca computed as 
                            --   HMAC(mac_key, R_pca || R_la || "scms-pca")
                            -- where (enc_key, mac_key) = 
                            --   KDF(R_pca || R_la || "scms-la-pca")
                            -- enc_key is the negotiated symmetric key to be 
                            -- used by PCA for PLV decryption
      failure ScopedLaPcaError
  } 
}


END
