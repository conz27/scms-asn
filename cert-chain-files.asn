IEEE1609dot2-cert-chains {iso(1) identified-organization(3) ieee(111) 
standards-association-numbered-series-standards(2) wave-stds(1609)  
dot2(2) base (1) cert-chains (4)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS

  IdentifiedRegion,
  SequenceOfIdentifiedRegion,
  Time64,
  Uint16
FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609)  
    dot2(2) base(1) base-types(2)}
 
  Certificate,
  Countersignature,
  ImplicitCertificate,
  ExplicitCertificate, 
  SequenceOfCertificate
FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609)  
    dot2(2) base(1) schema(1)}
;

CertificateChainFiles ::= CHOICE {
    globalCertificateChainFile GlobalCertificateChainFile,
    localCertificateChainFile LocalCertificateChainFile,
    ...
}

----
-- Common Certificate Chain File Structure
----

CertificateChainFile ::= SEQUENCE {
	version Uint16(0),
    certStore CertificateStore,
	rootMgmtCmds ManagementCommands OPTIONAL,
    ...
}

----
--
-- Global Certificate Chain File:
--
-- Contains the full certificate chains of each valid Root, ICA, or PCA that has been issued a
-- certificate. This file is signed by the Policy Generator.
--
----

GlobalCertificateChainFile ::= CertificateChainFile

----
--
-- Local Certificate Chain File:
--
-- Contains the full certificate chains of each valid Root, ICA, or PCA that has been issued a
-- certificate. This file is signed by the Policy Generator.
--
----

CompositeVersion ::= SEQUENCE {
	gccfVersion Uint16(0),
	lccfVersion Uint16(0)
}

LocalCertificateChainFileStructure ::= SEQUENCE {
	version CompositeVersion,
	required CertificateChainFile,
	optional CertificateChainFile OPTIONAL
}

LocalCertificateChainFile ::= LocalCertificateChainFileStructure( WITH COMPONENTS{...,
	optional( WITH COMPONENTS {...,
		rootMgmtCmds ABSENT -- root management commands can only be issued by the Global Certficate Chain File generator.
	})
})

--
-- Certificate Store
--

CertificateStore ::= SEQUENCE {
    rootCAs RootCerts,
    icaCertChains IcaCertChains,
    ecaCertChains EcaCertChains,
    pcaCertChains PcaCertChains,
    ...
}

-- Each certificate in the sequence is a Root CA.
RootCerts ::= SEQUENCE OF ExplicitCertificate

ExplicitCertificateChain ::= SEQUENCE OF ExplicitCertificate
ImplicitCertificateChain ::= SEQUENCE OF ImplicitCertificate

-- The first certificate in the sequence is the ICA certificate. The last certificate
-- in the sequence will be the Root certificate. 0 or more ICAs can be listed in
-- order between the first and last certificate of the sequence.
IcaCertChains ::= SEQUENCE OF ExplicitCertificateChain

-- The first certificate in the sequence is the ECA certificate. The last certificate
-- in the sequence will be the Root certificate. One or more ICAs should be listed in
-- order between the first and last certifcates of the sequence.
EcaCertChains ::= SEQUENCE OF ImplicitCertificateChain

-- The first certificate in the sequence is the PCA certificate. The last certificate
-- in the sequence will be the Root certificate. One or more ICAs should be listed in
-- order between the first and last certifcates of the sequence.
PcaCertChains ::= SEQUENCE OF ExplicitCertificateChain

----
-- Management Commands
----

ManagementCommands ::= SEQUENCE OF ManagementCommand

ManagementCommandType ::= ENUMERATED {
    addRootCA       (1),
    revokeRootCA    (2),
    ...
}

ManagementContext ::= CHOICE {
    rootInfo RootInfo,
    ...
}

ManagementCommand ::= SEQUENCE {
    command ManagementCommandType,
    context ManagementContext OPTIONAL,
    generationTime Time64,
    activeTime Time64,
    -- the countersignatures are generated by the Electors
    signatures SEQUENCE SIZE(1..MAX) OF Countersignature,
    ...
}

RootInfo ::= SEQUENCE {
    certificate ExplicitCertificate,
    ...
}

CommandAddRootCA ::= ManagementCommand (WITH COMPONENTS {...,
    command(addRootCA),
    context(WITH COMPONENTS{rootInfo})
})

CommandRevokeRootCA ::= ManagementCommand (WITH COMPONENTS {...,
    command(revokeRootCA),
    context(WITH COMPONENTS{rootInfo})
})

END
