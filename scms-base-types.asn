-------------------------------------------------------------------------------
-- SCMS-BASE-TYPES 
--
-- The structures in this file define some common messages, or base types, used
-- by different entities in the system, as well some constants related to the 
-- SCMS protocols.
--
-- This file is part of the SCMS protocol developed by CAMP VSC5
-- It depends on the IEEE 1609.2 protocol specification
-------------------------------------------------------------------------------

Ieee1609dot2ScmsBaseTypes {iso(1) identified-organization(3) ieee(111)
standards-association-numbered-series-standards(2) wave-stds(1609)  dot2(2)
scms (2) interfaces(1) base-types (2)}

DEFINITIONS AUTOMATIC TAGS ::= BEGIN 

EXPORTS ALL;
 
IMPORTS 
  CrlSeries,
  CountryOnly,
  Duration,
  Hostname,
  IValue,
  LaId,
  LinkageSeed,
  Opaque, 
  Psid,
  Signature,
  HashedId8,
  Uint8,
  Uint16,
  Uint32
FROM IEEE1609dot2BaseTypes {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609)  
    dot2(2) base(1) base-types(2)}

  RecipientInfo,
  EncryptedData,
  SignerIdentifier
FROM IEEE1609dot2 {iso(1) identified-organization(3) ieee(111) 
    standards-association-numbered-series-standards(2) wave-stds(1609)  
    dot2(2) base(1) schema(1)}

;

Canada ::= CountryOnly (124)
Mexico ::= CountryOnly (484)
USA ::= CountryOnly (840)

CrlgCertExpiration ::= Duration (WITH COMPONENTS {
    hours(26448)                            -- 3 years + 1 week = 26448 hours
})
DcmCertExpiration ::= Duration (WITH COMPONENTS {hours(26448)}) 
EcaCertExpirationCvp ::= Duration (WITH COMPONENTS {years(7)})
EcaCertExpirationPoc ::= Duration (WITH COMPONENTS {years(40)})
ElectorCertExpiration ::= Duration (WITH COMPONENTS {years(60)})
IcaCertExpirationCvp ::= Duration (WITH COMPONENTS {years(11)})
IcaCertExpirationPoc ::= Duration (WITH COMPONENTS {years(50)})
LaCertExpiration ::= Duration (WITH COMPONENTS {hours(26448)})
MaCertExpiration ::= Duration (WITH COMPONENTS {hours(26448)})
PcaCertExpiration ::= Duration (WITH COMPONENTS {years(4)})
PgCertExpiration ::= Duration (WITH COMPONENTS {hours(26448)})
ObeEnrollmentCertExpirationCvp ::= Duration (WITH COMPONENTS {years(1..7)})
ObeEnrollmentCertExpirationPoc ::= Duration (WITH COMPONENTS {years(30)})
ObeIdentificationCertExpiration ::= Duration (WITH COMPONENTS {
    hours(721)                              -- 1 month + 1 hour = 721 hours
})
ObePseudonymCertExpiration ::= Duration (WITH COMPONENTS {
    hours(169)                              -- 1 week + 1 hour = 169 hours
})
RaCertExpiration ::= Duration (WITH COMPONENTS {hours(26448)})
RseApplicationCertExpiration ::= Duration (WITH COMPONENTS {hours(169)})
RseEnrollmentCertExpirationCvp ::= Duration (WITH COMPONENTS {years(1..7)})
RseEnrollmentCertExpirationPoc ::= Duration (WITH COMPONENTS {years(30)})
RootCaCertExpiration ::= Duration (WITH COMPONENTS {years(70)})

BsmPsid ::= Psid (32)                                      -- PSID = 0x20
SecurityMgmtPsid ::= Psid (35)                             -- PSID = 0x23
MisbehaviorReportingPsid ::= Psid (38)                     -- PSID = 0x26
DifferentialGpsCorrectionsUncompressedPsid ::= Psid (128)  -- PSID = 0x80
DifferentialGpsCorrectionsCompressedPsid ::= Psid (129)    -- PSID = 0x81
IntersectionSafetyAndAwarenessPsid ::= Psid (130)          -- PSID = 0x82
TravellerInformationAndRoadsideSignagePsid ::= Psid (131)  -- PSID = 0x83
WaveServiceAdvertisementPsid ::= Psid (135)                -- PSID = 0x87
PeerToPeerCertDistributionPsid ::= Psid (136)              -- PSID = 0x88


EeEnrollmentCrlSeries ::= CrlSeries (4)
EeNonPseudonymCrlSeries ::= CrlSeries (3)
ObePseudonymCrlSeries ::= CrlSeries (1)
ScmsComponentCrlSeries ::= CrlSeries (2)
ScmsSpclComponentCrlSeries ::= CrlSeries (256)

--------------------------------
-- EncryptedIndividualPLV 
--
-- This structure contains the encrypted individual pre-linkage value as 
-- generated by an LA and encrypted by the LA using the pre-shared symmetric key
-- with the PCA.
--
-- version            version of Encrypted PLV
-- laId               the unique identifier for the LA which created the PLV
-- enc-plv            structure containing the encrypted individual PLV. The 
--                    ciphertext field in enc-plv decrypts to a 
--                    ToBeEncryptedIndividualPLV.
--   symmRecipInfo    Pointer to the used encryption key. The encryption key 
--                    is identified by the hash of key agreement (PCA’s initial
--                    request) 
--------------------------------
EncryptedIndividualPLV ::= SEQUENCE {
    version         Uint8(1),   
    laId            LaId,
    enc-plv         EncryptedData (WITH COMPONENTS {
      recipients (SIZE (1) INTERSECTION (WITH COMPONENT (
        RecipientInfo (WITH COMPONENTS {
            symmRecipInfo 
      }))))
    })
}

--------------------------------
-- EncryptedGroupPLV 
--
-- This structure contains the encrypted group pre-linkage value as 
-- generated by an LA and encrypted by the LA using the pre-shared symmetric key
-- with the PCA.
--
-- version            version of Encrypted PLV
-- laId               the unique identifier for the LA which created the PLV
-- encGroupIndex      encrypted group index. This structure decrypts to a 
--                    ToBeEncryptedGroupIndex
-- enc-plv            structure containing the encrypted group PLV. The 
--                    ciphertext field in enc-plv decrypts to a 
--                    ToBeEncryptedGroupPLV.
--   symmRecipInfo    Pointer to the used encryption key. The encryption key 
--                    is identified by the hash of key agreement (PCA’s initial
--                    request) 
--------------------------------
EncryptedGroupPLV ::= SEQUENCE {
    version         Uint8(1),  
    laId            LaId,     
    encGroupIndex   OCTET STRING (SIZE(16)), 
    enc-group-plv   EncryptedData (WITH COMPONENTS {
      recipients (SIZE (1) INTERSECTION (WITH COMPONENT (
        RecipientInfo (WITH COMPONENTS {
            symmRecipInfo 
      }))))
    })
}


zero8 OCTET STRING ::= '0000000000000000'H

--------------------------------
-- ToBeEncryptedGroupIndex 
-- 
-- Structure containing the group index to be encrypted. This index is generated
-- to support the forwarding of group revocation information generated by the LA
-- to the PCA. This value is used as an auxiliary value in the RA and then 
-- discarded.
--
-- padding            64-bit padding, composed of 0s only
-- groupIdentifier    the 32-bit group identifier
-- j                  the j value
--------------------------------
ToBeEncryptedGroupIndex ::= SEQUENCE {
    padding         OCTET STRING (SIZE(8)) (zero8), 
    groupIdentifier OCTET STRING (SIZE(4)),        
    j               Uint32
}
   
--------------------------------
-- ToBeEncryptedIndividualPLV 
-- 
-- Structure containing the individual pre-linkage value to be encrypted, 
-- generated by an LA 
--
-- iValue             the i value
-- plv                the pre-linkage value
--------------------------------
ToBeEncryptedIndividualPLV ::= SEQUENCE {
    iValue     IValue,
    plv        PreLinkageValue
} 

--------------------------------
-- ToBeEncryptedGroupPLV 
-- 
-- Structure containing the group pre-linkage value to be encrypted
--
-- iValue             the i value
-- j                  the j value
-- plv                the pre-linkage value
--------------------------------
ToBeEncryptedGroupPLV ::= SEQUENCE {
   iValue      IValue,
   j           Uint32,
   plv         PreLinkageValue
}

--------------------------------
-- LinkageChainId 
-- 
-- This structure contains the encrypted linkage seed, used in messages between
-- an LA and the RA and between an LA and the MA. This value allows the 
-- generating LA to identify a linkage chain and its underlying linkage seed.
--
-- recipients         the recipient of this structure
-- ciphertext         the ciphertext that when decrypted contains a LinkageSeed
--------------------------------
LinkageChainId ::= EncryptedData (WITH COMPONENTS {
    recipients (SIZE (1) INTERSECTION (WITH COMPONENT (
        RecipientInfo (WITH COMPONENTS {
            symmRecipInfo
    })))),
    ciphertext
  }  
)


--------------------------------
-- PreLinkageValue  
-- 
-- The pre-linkage value generated by an LA
--------------------------------
PreLinkageValue ::= OCTET STRING (SIZE(9))

--------------------------------
-- FullSizeHash  
-- 
-- Non-truncated hash digest
--------------------------------
FullSizeHash ::= OCTET STRING (SIZE(32))

RaHostnameId  ::= Hostname
PcaHostnameId ::= Hostname
MaHostnameId  ::= Hostname
LaHostnameId  ::= Hostname

--------------------------------
-- HPCR  
-- 
-- Hash of RA-to-PCA Pseudonym Certificate Request. This is the full-size hash 
-- of a singular certificate request from the RA to the PCA.

--------------------------------
HPCR            ::= FullSizeHash


--------------------------------
-- LinkageSeedAndLaId 
-- 
-- Structure containing a linkage Seed and the LaId of the generating LA. This
-- structure is sent by the LA to the MA in response to a linkage a seed 
-- request.
--
-- linkageSeed        the linkage seed used to generate a linkage chain
-- laId               the unique identifier for the LA
--------------------------------
LinkageSeedAndLaId ::= SEQUENCE {
	linkageSeed	LinkageSeed,
	laId		LaId
}

--------------------------------
-- SignatureAndSignerIdentifier 
-- 
-- This structure groups together a signature and a its signer
--
-- signer             the signer of the message
-- signature          the signature generated by the signer
--------------------------------
SignatureAndSignerIdentifier ::= SEQUENCE {
	signer 		SignerIdentifier,
	signature	Signature
}

--------------------------------
-- EncryptedPlvAndHostInfo 
-- 
-- This structure contains the encrypted individual pre-linkage value and the 
-- host information of the generating LA sent to the MA by the PCA.
--
-- encryptedPLV       the encrypted individual pre-linkage value
-- hostname           the hostname of the LA that generated the PLV
--------------------------------
EncryptedPlvAndHostInfo ::= SEQUENCE {
	encryptedPLV    EncryptedIndividualPLV,
	hostname	Hostname
}

--------------------------------
-- EncryptedGroupPlvAndHostInfo 
-- 
-- This structure contains the encrypted group pre-linkage value and the 
-- host information of the generating LA sent to the MA by the PCA.
--
-- encryptedGPLV      the encrypted group pre-linkage value
-- hostname           the hostname of the LA that generated the GPLV
--------------------------------
EncryptedGroupPlvAndHostInfo ::= SEQUENCE {
	encryptedGPLV   EncryptedGroupPLV,
	hostname	Hostname
}



--------------------------------
-- HPCRAndHostInfo 
-- 
-- Structure grouping the hash of the pseudonym certificate request (HPCR) and 
-- the hostname of the RA that requested the certificate. Appears in some 
-- messages exchanged between the MA and the PCA.
--
-- hpcr               the hash of the certificate request
-- hostname           the hostname of the RA
--------------------------------
HPCRAndHostInfo ::= SEQUENCE {
	hpcr		HPCR,
	hostname        Hostname
}

--------------------------------
-- LCIAndHostInfo 
-- 
-- Structure containing pairs of linkage chain idenfiers and the hostnames of 
-- the corresponding LAs. This structure appears in messages exchanged between 
-- the MA and the RA.
-- 
-- iMax               value used by the RA to indicate to the MA the validity
--                    period of certificates issued to the considered device
-- la1-lci            the linkage chain identifier from the LA1
-- la2-lci            the linkage chain identifier from the LA2
-- la1-id             the hostname of the LA1
-- la2-id             the hostname of the LA2
--------------------------------
LCIAndHostInfo ::= SEQUENCE {
	iMax            OCTET STRING (SIZE (4)),
	la1-lci         LinkageChainId,
	la2-lci         LinkageChainId,
	la1-id          LaHostnameId,
	la2-id          LaHostnameId
}

--------------------------------
-- Revocation Identifier (RIF)
-- 
-- This is an 8-byte hash of an enrollment certificate
--------------------------------
RIF ::= HashedId8


END
